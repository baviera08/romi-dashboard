{"version":3,"sources":["mock/fake-traj-manager.ts","mock/data/fleets.ts","mock/fake-transport.ts","mock/data/door-states.ts","mock/data/lift-states.ts","mock/data/dispenser-states.ts","robot-trajectory-manager.ts","app-config.ts","settings.ts","door-state-manager.ts","fleet-manager.ts","lift-state-manager.ts","dispenser-state-manager.ts","components/door-item.tsx","components/doors-panel.tsx","components/disableable-typography.tsx","components/lift-item.tsx","components/lifts-panel.tsx","components/loading-screen.tsx","components/main-menu.tsx","components/omni-panel.tsx","components/omni-panel-view.tsx","components/place-item.tsx","components/places-panel.tsx","components/robot-item.tsx","components/robots-panel.tsx","components/dispenser-item.tsx","components/dispensers-panel.tsx","util/index.ts","components/schedule-visualizer/colors.ts","components/schedule-visualizer/place.tsx","components/schedule-visualizer/svg-overlay.tsx","components/schedule-visualizer/places-overlay.tsx","util/css-utils.ts","util/cublic-spline.ts","components/schedule-visualizer/robot-trajectory.tsx","components/schedule-visualizer/robot-trajectories-overlay.tsx","components/schedule-visualizer/robot.tsx","components/schedule-visualizer/robots-overlay.tsx","components/schedule-visualizer/trajectory-animations.tsx","components/schedule-visualizer/index.tsx","components/settings-drawer.tsx","components/app.tsx","serviceWorker.ts","leaflet/control-positions.ts","index.tsx","mock/data/building-map.ts","mock/data/airport_terminal.png","mock/data/office.png"],"names":["FakeTrajectoryManager","request","param","map_name","JSON","parse","stringify","trajectories","response","values","Error","superFleet","robots","i","push","name","model","mode","RomiCore","MODE_MOVING","location","level_name","x","y","yaw","Math","PI","t","sec","nanosec","battery_percent","path","task_id","FakeTransport","topic","options","publish","debug","log","cb","doorStates","Door1","door_name","current_mode","value","MODE_OPEN","door_time","Door2","MODE_CLOSED","setInterval","Object","state","liftStates","Lift1","lift_name","available_floors","available_modes","Uint8Array","MODE_AGV","current_floor","destination_floor","door_state","DOOR_OPEN","lift_time","motion_state","MOTION_STOPPED","session_id","Lift2","DOOR_CLOSED","MOTION_UP","fleets","MODE_WAITING","MODE_EMERGENCY","fleet","dispenserStates","Dispenser0","time","guid","request_guid_queue","seconds_remaining","Dispenser1","Dispenser2","unsubscribe","service","req","buildingMap","rawKnotsToKnots","rawKnots","knots","rawKnot","poseX","poseY","poseTheta","v","velocityX","velocityY","velocityTheta","pose","theta","velocity","appConfig","TrajectoryAnimation","AnimationSpeed","transportFactory","a","trajectoryManagerFactory","DoorStateManager","_doorStates","this","transport","subscribe","doorState","emit","EventEmitter","FleetManager","_fleets","Array","from","fleetState","LiftStateManager","_liftStates","liftState","DispenserStateManager","_dispenserStates","dispenserState","defaultSettings","trajectoryAnimation","Follow","trajectoryAnimationSpeed","Normal","SettingsContext","React","createContext","DoorItem","forwardRef","props","ref","door","enableControls","onOpenClick","onCloseClick","otherProps","classes","useStyles","theme","useTheme","ExpansionPanel","ExpansionPanelSummary","content","expansionSummaryContent","expandIcon","ExpandMore","Typography","variant","className","doorLabel","doorLabelOpen","doorLabelClosed","doorLabelMoving","doorModeLabelClasses","doorModeToString","ExpansionPanelDetails","expansionDetail","expansionDetailLine","doorType","DOOR_TYPE_DOUBLE_SLIDING","DOOR_TYPE_DOUBLE_SWING","DOOR_TYPE_DOUBLE_TELESCOPE","DOOR_TYPE_SINGLE_SLIDING","DOOR_TYPE_SINGLE_TELESCOPE","doorTypeToString","door_type","Divider","motionDirection","motionDirectionToString","motion_direction","motion_range","v1_x","toFixed","v1_y","ButtonGroup","style","marginTop","spacing","fullWidth","disabled","Button","onClick","makeStyles","alignItems","justifyContent","flexFlow","display","padding","borderRadius","shape","borderStyle","border","width","textAlign","borderColor","palette","success","main","error","warning","DoorsPanel","spotlight","onDoorClick","doorRefs","useRef","useState","expanded","setExpanded","doorRequestPub","useMemo","createPublisher","requestDoor","requested_mode","requester_id","request_time","Date","useEffect","current","prev","scrollIntoView","behavior","listItems","doors","map","key","Boolean","onChange","_","newExpanded","Fragment","color","action","DisableableTypography","clsx","children","LiftItem","lift","enableRequest","onRequest","liftRequestMenuState","setLiftRequestMenuState","renderList","items","val","ListItem","dense","noPadding","List","liftFloorLabelUnknown","MOTION_DOWN","liftFloorLabelMoving","liftFloorLabelStopped","liftFloorLabel","ref_x","ref_y","renderAvailableFloors","liftModeToString","renderAvailableModes","DOOR_MOVING","doorStateToString","motionState","motionStateToString","event","anchor","top","clientY","left","clientX","handleRequestClick","Popover","anchorReference","anchorPosition","open","onClose","levels","floor","MenuItem","liftFloorLabelBase","info","liftMode","MODE_FIRE","MODE_HUMAN","LiftsPanel","onLiftRequest","onLiftClick","liftRequestPub","liftRefs","handleLiftRequest","destination","request_type","REQUEST_AGV_MODE","lifts","root","zIndex","drawer","caption","LoadingScreen","Backdrop","undefined","CircularProgress","size","htmlColor","fontSize","getContrastText","MainMenu","button","onDoorsClick","onLiftsClick","onRobotsClick","onPlacesClick","onDispensersClick","container","viewContainer","height","overflowX","position","OmniPanel","view","onBack","navigation","backButton","closeButton","Close","OmniPanelView","index","show","Slide","direction","in","mountOnEnter","unmountOnExit","appear","summary","marginBottom","details","detailLine","PlaceItem","place","level","ListItemText","primary","primaryTypographyProps","secondary","position_tolerance","yaw_tolerance","PlacesPanel","onPlaceClick","placeRefs","flatMap","places","RobotItem","robot","onRobotClick","robotStatusLabel","robotMode","MODE_CHARGING","MODE_DOCKING","MODE_GOING_HOME","MODE_IDLE","MODE_PAUSED","robotModeToString","noWrap","minWidth","RobotsPanel","robotRefs","TransitionProps","DispenserItem","dispenserModeLabelClasses","useDispenserModeLabelStyles","IDLE","dispenserLabel","idle","BUSY","busy","OFFLINE","offline","dispenserModeLabelClass","dispenserModeToString","String","length","listRoot","id","overflow","maxHeight","base","DispenserPanel","dispenserRefs","keys","toBlobUrl","data","blob","Blob","URL","createObjectURL","_hash","s","encoder","TextEncoder","encode","crypto","subtle","digest","ColorManager","_robotColorCache","_robotKey","Uint16Array","modelHash","hue","nameHash","satlum","saturation","luminance","Place","e","placeMarker","fill","opacity","cursor","pointerEvents","SVGOverlay","SVGOverlay_","PlacesOverlay","viewBox","bounds","lbounds","L","getEast","getWest","getNorth","getSouth","viewBoxFromLeafletBounds","place_","segmentToCoefficientSet","segment","x0","initialPose","x1","finalPose","v0","initialVelocity","v1","finalVelocity","initialTime","dt","finalTime","w0","w1","b","c","d","assignKnotsToSegment","knot","nextKnot","forCoordinate","knotsToSegmentCoefficientsArray","scs","sc","bezierHelper","coeffs","p1","p2","bezierControlPoints","segmentCoefficients","px","py","RobotTrajectory","trajectory","footprint","pathD","bezierSplines","segments","bzCurves","stroke","strokeWidth","strokeLinecap","pathLength","strokeDasharray","strokeDashoffset","RobotTrajectoriesOverlay","trajs","colorManager","trajectoryContext","useContext","RobotTrajectoryContext","traj","Component","robotMarker","Robot","robotColorFromCache","robotColor","setRobotColor","nose","cos","sin","useLayoutEffect","dx","dy","stdDeviation","floodColor","cx","cy","r","filter","y1","x2","y2","RobotsOverlay","robot_","keyframeOffsets","totalDuration","seg","useFillStyles","anim","highlight","useFollowStyles","useOutlineStyles","maskPath","margin","calcMaxBounds","mapFloorLayers","forEach","extend","pad","ScheduleVisualizer","mapRef","mapElement","setMapFloorLayers","mapFloorLayerSort","sort","elevation","curLevelName","setCurLevelName","curMapFloorLayer","initialBounds","initialLayer","maxBounds","setMaxBounds","robotsInCurLevel","settings","trajAnimDuration","Slow","Fast","TrajectoryComponent","None","Fill","animationDuration","pathRef","offsets","pathAnim","cloneNode","classList","add","remove","setAttribute","parentElement","appendChild","animate","offset","duration","easing","withFillAnimation","strokeDash","Number","getAttribute","getTotalLength","max","withFollowAnimation","Outline","parent","mask","document","createElementNS","maskRect","pathStrokeWidth","parseFloat","toString","removeAttribute","withOutlineAnimation","promises","image","images","Promise","res","imageElement","Image","imageUrl","src","addEventListener","listener","removeEventListener","naturalWidth","scale","naturalHeight","y_offset","x_offset","p","interval","trajManager","window","latestTrajectory","trim","resp","clearInterval","sortedMapFloorLayers","leafletElement","setZIndex","attributionControl","crs","Simple","minZoom","maxZoom","zoomDelta","zoomSnap","onbaselayerchange","AttributionControl","prefix","LayersControl","every","floorLayer","BaseLayer","checked","ImageOverlay","url","Overlay","Pane","Provider","SettingsDrawer","onSettingsChange","trajAnimsText","slice","Drawer","PaperProps","FormControl","component","FormLabel","legendLabel","RadioGroup","trajGroup","ev","newSettings","target","text","FormControlLabel","flexBasis","control","Radio","label","OmniPanelViewIndex","typography","h6","flexDirection","paddingLeft","toolBarTitle","flexGrow","omniPanel","right","bottom","backgroundColor","background","default","borderTopLeftRadius","borderTopRightRadius","boxShadow","shadows","topLeftBorder","topRightBorder","ViewMapNode","viewMap","Doors","addChild","Lifts","Robots","Places","Dispensers","makeViewMap","App","setTransport","setBuildingMap","doorStateManager","setDoorStates","setDoors","setDoorSpotlight","liftStateManager","setLiftStates","setLifts","setLiftSpotlight","fleetManager","setFleets","robotSpotlight","setRobotSpotlight","placeSpotlight","setPlaceSpotlight","dispenserStateManager","setDispenserStates","dispenserSpotlight","setDispenserSpotlight","showOmniPanel","setShowOmniPanel","currentView","setCurrentView","loading","setLoading","showSettings","setShowSettings","settingsStr","localStorage","getItem","loadSettings","setSettings","clearSpotlights","handleClose","then","on","console","once","startSubscription","catch","code","call","result","building_map","off","AppBar","Toolbar","IconButton","Dashboard","Settings","Fade","setItem","saveSettings","hostname","match","origInitControlPos","prototype","_initControlPos","include","_controlCorners","create","_controlContainer","extendControlPositions","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","fs","officePng","readFileSync","__dirname","airportPng","fetch","officePngUrl","officePngResp","arrayBuffer","airportPngUrl","airportPngResp","v2_x","v2_y","encoding","nav_graphs","wall_graph","vertices","edges","params","ref_yaw","module","exports"],"mappings":"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","file":"static/js/main.44c022a6.chunk.js","sourcesContent":["import {\n  RobotTrajectoryManager,\n  TimeRequest,\n  TimeResponse,\n  TrajectoryRequest,\n  TrajectoryResponse,\n} from '../robot-trajectory-manager';\nimport trajectories from './data/trajectories.json';\n\nexport default class FakeTrajectoryManager implements RobotTrajectoryManager {\n  async latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse> {\n    if (request.param.map_name === 'L1') {\n      // \"deep clone\" object\n      return JSON.parse(JSON.stringify(trajectories)) as any;\n    }\n    return {\n      response: 'trajectory',\n      values: [],\n    };\n  }\n\n  serverTime(request: TimeRequest): Promise<TimeResponse> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nfunction superFleet(): RomiCore.FleetState {\n  const robots: RomiCore.RobotState[] = [];\n  for (let i = 1; i <= 20; i++) {\n    robots.push({\n      name: `Geth${i}`,\n      model: 'TeRmInAtOr',\n      mode: { mode: RomiCore.RobotMode.MODE_MOVING },\n      location: {\n        level_name: 'L1',\n        x: i,\n        y: -2,\n        yaw: ((i * 0.1) % 2) * Math.PI,\n        t: { sec: 0, nanosec: 0 },\n      },\n      battery_percent: 100,\n      path: [],\n      task_id: 'taskA',\n    });\n  }\n\n  return {\n    name: 'SuperFleet',\n    robots: robots,\n  };\n}\n\nexport default function fakeFleets(): RomiCore.FleetState[] {\n  return [\n    {\n      name: 'Fleet1',\n      robots: [\n        {\n          name: 'RobotA',\n          model: 'ModelA',\n          mode: { mode: RomiCore.RobotMode.MODE_MOVING },\n          location: {\n            level_name: 'L1',\n            x: 2,\n            y: -5,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskA',\n        },\n        {\n          name: 'RobotB',\n          model: 'ModelB',\n          mode: { mode: RomiCore.RobotMode.MODE_WAITING },\n          location: {\n            level_name: 'L1',\n            x: 12,\n            y: -10,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskB',\n        },\n      ],\n    },\n    {\n      name: 'Fleet2',\n      robots: [\n        {\n          name: 'RobotC',\n          model: 'ModelC',\n          mode: { mode: RomiCore.RobotMode.MODE_EMERGENCY },\n          location: {\n            level_name: 'L2',\n            x: 4,\n            y: -12,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskC',\n        },\n      ],\n    },\n    superFleet(),\n  ];\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport debug from 'debug';\nimport buildingMap from './data/building-map';\nimport fakeDoorStates from './data/door-states';\nimport fakeFleets from './data/fleets';\nimport fakeLiftStates from './data/lift-states';\nimport fakeDispenserStates from './data/dispenser-states';\n\nexport class FakeTransport extends RomiCore.TransportEvents implements RomiCore.Transport {\n  name: string = 'fake';\n\n  createPublisher<Message extends object>(\n    topic: RomiCore.RomiTopic<Message>,\n    options?: RomiCore.Options | undefined,\n  ): RomiCore.Publisher<Message> {\n    return {\n      publish: debug.log,\n    };\n  }\n\n  subscribe<Message extends object>(\n    topic: RomiCore.RomiTopic<Message>,\n    cb: RomiCore.SubscriptionCb<Message>,\n    options?: RomiCore.Options | undefined,\n  ): RomiCore.Subscription {\n    debug.log('subscribe:', topic);\n    switch (topic) {\n      case RomiCore.doorStates: {\n        const doorStates = fakeDoorStates();\n        setInterval(() => {\n          for (const state of Object.values(doorStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.liftStates: {\n        const liftStates = fakeLiftStates();\n        setInterval(() => {\n          for (const state of Object.values(liftStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.fleetStates: {\n        const fleets = fakeFleets();\n        setInterval(() => {\n          for (const fleet of fleets) {\n            cb(fleet as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.dispenserStates: {\n        const dispenserStates = fakeDispenserStates();\n        setInterval(() => {\n          for (const state of Object.values(dispenserStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n    }\n    return {\n      unsubscribe: () => {},\n    };\n  }\n\n  async call<Request extends object, Response extends object>(\n    service: RomiCore.RomiService<Request, Response>,\n    req: Request,\n  ): Promise<Response> {\n    if (service.service === 'get_building_map') {\n      return new RomiCore.GetBuildingMap_Response(await buildingMap()) as any;\n    }\n    throw new Error('not implemented');\n  }\n\n  destroy(): void {}\n}\n\nexport default FakeTransport;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeDoorStates(): Record<string, RomiCore.DoorState> {\n  return {\n    Door1: {\n      door_name: 'main_door',\n      current_mode: { value: RomiCore.DoorMode.MODE_OPEN },\n      door_time: { sec: 0, nanosec: 0 },\n    },\n    Door2: {\n      door_name: 'hardware_door',\n      current_mode: { value: RomiCore.DoorMode.MODE_CLOSED },\n      door_time: { sec: 0, nanosec: 0 },\n    },\n  };\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeLiftStates(): Record<string, RomiCore.LiftState> {\n  return {\n    Lift1: {\n      lift_name: 'Lift1',\n      available_floors: ['L1', 'L2', 'L3'],\n      available_modes: new Uint8Array([RomiCore.LiftState.MODE_AGV]),\n      current_floor: 'L1',\n      current_mode: RomiCore.LiftState.MODE_AGV,\n      destination_floor: 'L1',\n      door_state: RomiCore.LiftState.DOOR_OPEN,\n      lift_time: { sec: 0, nanosec: 0 },\n      motion_state: RomiCore.LiftState.MOTION_STOPPED,\n      session_id: '',\n    },\n    Lift2: {\n      lift_name: 'Lift2',\n      available_floors: ['L1', 'L2', 'L3', 'L4'],\n      available_modes: new Uint8Array([RomiCore.LiftState.MODE_AGV]),\n      current_floor: 'L2',\n      current_mode: RomiCore.LiftState.MODE_AGV,\n      destination_floor: 'L4',\n      door_state: RomiCore.LiftState.DOOR_CLOSED,\n      lift_time: { sec: 0, nanosec: 0 },\n      motion_state: RomiCore.LiftState.MOTION_UP,\n      session_id: '',\n    },\n  };\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeDispenserStates(): Record<string, RomiCore.DispenserState> {\n  return {\n    Dispenser0: {\n      time: { sec: 0, nanosec: 0 },\n      guid: 'Dispenser0',\n      mode: 0,\n      request_guid_queue: [],\n      seconds_remaining: 0,\n    },\n    Dispenser1: {\n      time: { sec: 0, nanosec: 0},\n      guid: 'Dispenser1',\n      mode: 1,\n      request_guid_queue: ['Request0', 'Request1', 'Request2', 'Request3', \n          'Request4', 'Request5', 'Request6', 'Request7', 'Request8', \n          'Request9'],\n      seconds_remaining: 420,\n    },\n    Dispenser2: {\n      time: { sec: 0, nanosec: 0},\n      guid: 'Dispenser2',\n      mode: 2,\n      request_guid_queue: [],\n      seconds_remaining: 0,\n    },\n  };\n}\n","import { Knot } from './util/cublic-spline';\n\n// RawVelocity received from server is in this format (x, y, theta)\nexport type RawVelocity = [number, number, number];\n\n// RawPose2D received from server is in this format (x, y, theta)\nexport type RawPose2D = [number, number, number];\n\ninterface RawKnot {\n  t: number; // milliseconds\n  v: RawVelocity;\n  x: RawPose2D;\n}\n\nexport interface TrajectoryRequest {\n  request: 'trajectory';\n  param: {\n    map_name: string;\n    duration: number;\n    trim: boolean;\n  };\n}\n\nexport interface TimeRequest {\n  request: 'time';\n  param: {};\n}\n\nexport interface TimeResponse {\n  response: 'time';\n  values: [number];\n}\n\nexport interface Trajectory {\n  id: number;\n  shape: string;\n  dimensions: number;\n  segments: RawKnot[];\n}\n\nexport interface TrajectoryResponse {\n  response: 'trajectory';\n  values: Trajectory[];\n}\n\nexport interface RobotTrajectoryManager {\n  serverTime(request: TimeRequest): Promise<TimeResponse>;\n  latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse>;\n}\n\ninterface Request {\n  request: string;\n  param: unknown;\n}\n\ninterface Response {\n  response: string;\n  values: unknown;\n}\n\nexport class DefaultTrajectoryManager {\n  static async create(url: string): Promise<DefaultTrajectoryManager> {\n    const ws = new WebSocket(url);\n    await new Promise((res, rej) => {\n      ws.addEventListener('open', function listener() {\n        ws.removeEventListener('open', listener);\n        res();\n      });\n\n      ws.addEventListener('error', function listener(e) {\n        ws.removeEventListener('error', listener);\n        rej(e);\n      });\n    });\n    return new DefaultTrajectoryManager(ws);\n  }\n\n  async latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse> {\n    const event = await this._send(JSON.stringify(request));\n    const resp = JSON.parse(event.data);\n    this._checkResponse(request, resp);\n    if (resp.values === null) {\n      resp.values = [];\n    }\n    return resp as TrajectoryResponse;\n  }\n\n  async serverTime(request: TimeRequest): Promise<TimeResponse> {\n    const event = await this._send(JSON.stringify(request));\n    const resp = JSON.parse(event.data);\n    this._checkResponse(request, resp);\n    return resp as TimeResponse;\n  }\n\n  private _ongoingRequest: Promise<MessageEvent> | null = null;\n\n  private constructor(private _webSocket: WebSocket) {}\n\n  private _listenOnce<K extends keyof WebSocketEventMap>(\n    event: K,\n    listener: (e: WebSocketEventMap[K]) => unknown,\n  ): void {\n    this._webSocket.addEventListener(event, e => {\n      this._webSocket.removeEventListener(event, listener);\n      listener(e);\n    });\n  }\n\n  /**\n   * Sends a message and waits for response from the server.\n   *\n   * @remarks This is an alternative to the old implementation of creating a promise, storing the\n   * resolver and processing each message in an event loop. Advantage of this is that each message\n   * processing logic can be self-contained without a need for a switch or if elses.\n   */\n  private async _send(payload: WebSocketSendParam0T): Promise<MessageEvent> {\n    // response should come in the order that requests are sent, this should allow multiple messages\n    // in-flight while processing the responses in the order they are sent.\n    this._webSocket.send(payload);\n    // waits for the earlier response to be processed.\n    if (this._ongoingRequest) {\n      await this._ongoingRequest;\n    }\n\n    this._ongoingRequest = new Promise(res => {\n      this._listenOnce('message', e => {\n        this._ongoingRequest = null;\n        res(e);\n      });\n    });\n    return this._ongoingRequest;\n  }\n\n  private _checkResponse(request: Request, resp: Response): void {\n    if (request.request !== resp.response) {\n      console.warn('received response for wrong request');\n      throw new Error('received response for wrong request');\n    }\n  }\n}\n\nexport function rawKnotsToKnots(rawKnots: RawKnot[]): Knot[] {\n  const knots: Knot[] = [];\n\n  for (const rawKnot of rawKnots) {\n    const [poseX, poseY, poseTheta] = rawKnot.x;\n    const [velocityX, velocityY, velocityTheta] = rawKnot.v;\n    knots.push({\n      pose: {\n        x: poseX,\n        y: poseY,\n        theta: poseTheta,\n      },\n      velocity: {\n        x: velocityX,\n        y: velocityY,\n        theta: velocityTheta,\n      },\n      time: rawKnot.t,\n    });\n  }\n\n  return knots;\n}\n\ntype WebSocketSendParam0T = Parameters<WebSocket['send']>[0];\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport { SossTransport } from '@osrf/romi-js-soss-transport';\nimport FakeTrajectoryManager from './mock/fake-traj-manager';\nimport { FakeTransport } from './mock/fake-transport';\nimport { DefaultTrajectoryManager, RobotTrajectoryManager } from './robot-trajectory-manager';\n\nexport interface AppConfig {\n  transportFactory: () => Promise<RomiCore.Transport>;\n  trajectoryManagerFactory?: () => Promise<RobotTrajectoryManager>;\n}\n\nexport let appConfig: AppConfig;\n\nif (!process.env.REACT_APP_MOCK) {\n  // { user: 'romi-dashboard' } signed with HS256 + secret 'rmf'\n  // prettier-ignore\n  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoicm9taS1kYXNoYm9hcmQiLCJpYXQiOjE1ODMyODYyMTV9.x9aNjcLujQPHchWEsbrRbvctmnGQtEzw-81X0aPIE-Y'\n\n  appConfig = {\n    transportFactory: () => SossTransport.connect('romi-dashboard', 'wss://localhost:50001', token),\n    trajectoryManagerFactory: () => DefaultTrajectoryManager.create('ws://localhost:8006'),\n  };\n} else {\n  appConfig = {\n    transportFactory: async () => new FakeTransport(),\n    trajectoryManagerFactory: async () => new FakeTrajectoryManager(),\n  };\n}\n\nexport default appConfig;\n","import React from 'react';\n\nexport enum TrajectoryAnimation {\n  None,\n  Fill,\n  Follow,\n  Outline,\n}\n\nexport enum AnimationSpeed {\n  Slow,\n  Normal,\n  Fast,\n}\n\nexport interface Settings {\n  trajectoryAnimation: TrajectoryAnimation;\n  trajectoryAnimationSpeed: AnimationSpeed;\n}\n\nexport function saveSettings(settings: Settings): void {\n  localStorage.setItem('settings', JSON.stringify(settings));\n}\n\nexport function loadSettings(): Settings {\n  const settingsStr = localStorage.getItem('settings');\n  if (!settingsStr) {\n    return defaultSettings();\n  }\n  return JSON.parse(settingsStr);\n}\n\nexport function defaultSettings(): Settings {\n  return {\n    trajectoryAnimation: TrajectoryAnimation.Follow,\n    trajectoryAnimationSpeed: AnimationSpeed.Normal,\n  };\n}\n\nexport const SettingsContext = React.createContext(defaultSettings());\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class DoorStateManager extends EventEmitter<Events> {\n  doorStates(): Record<string, RomiCore.DoorState> {\n    return { ...this._doorStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.doorStates, doorState => {\n      this._doorStates[doorState.door_name] = doorState;\n      this.emit('updated');\n    });\n  }\n\n  private _doorStates: Record<string, RomiCore.DoorState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n}\n\nexport default class FleetManager extends EventEmitter<Events> {\n  fleets(): RomiCore.FleetState[] {\n    return Array.from(Object.values(this._fleets));\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.fleetStates, fleetState => {\n      this._fleets[fleetState.name] = fleetState;\n      this.emit('updated');\n    });\n  }\n\n  private _fleets: Record<string, RomiCore.FleetState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class LiftStateManager extends EventEmitter<Events> {\n  liftStates(): Record<string, RomiCore.LiftState> {\n    return { ...this._liftStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.liftStates, liftState => {\n      this._liftStates[liftState.lift_name] = liftState;\n      this.emit('updated');\n    });\n  }\n\n  private _liftStates: Record<string, RomiCore.LiftState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class DispenserStateManager extends EventEmitter<Events> {\n  dispenserStates(): Record<string, RomiCore.DispenserState> {\n    return { ...this._dispenserStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.dispenserStates, dispenserState => {\n      this._dispenserStates[dispenserState.guid] = dispenserState;\n      this.emit('updated');\n    });\n  }\n\n  private _dispenserStates: Record<string, RomiCore.DispenserState> = {};\n}\n","import {\n  Button,\n  ButtonGroup,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface DoorItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  door: Readonly<RomiCore.Door>;\n  doorState?: Readonly<RomiCore.DoorState>;\n  enableControls?: boolean;\n  onDoorClick?(door: RomiCore.Door): void;\n  onOpenClick?(door: RomiCore.Door): void;\n  onCloseClick?(door: RomiCore.Door): void;\n}\n\nexport const DoorItem = React.forwardRef(function(\n  props: DoorItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { door, doorState, enableControls, onOpenClick, onCloseClick, ...otherProps } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n\n  function doorModeLabelClasses(doorState?: RomiCore.DoorState): string {\n    if (!doorState) {\n      return '';\n    }\n    switch (doorState.current_mode.value) {\n      case RomiCore.DoorMode.MODE_OPEN:\n        return `${classes.doorLabel} ${classes.doorLabelOpen}`;\n      case RomiCore.DoorMode.MODE_CLOSED:\n        return `${classes.doorLabel} ${classes.doorLabelClosed}`;\n      case RomiCore.DoorMode.MODE_MOVING:\n        return `${classes.doorLabel} ${classes.doorLabelMoving}`;\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography variant=\"h5\">{door.name}</Typography>\n        <Typography className={doorModeLabelClasses(doorState)} variant=\"button\">\n          {doorModeToString(doorState)}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Type:</Typography>\n          <Typography variant=\"body1\">{doorTypeToString(door.door_type)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Motion Direction:</Typography>\n          <Typography variant=\"body1\">{motionDirectionToString(door.motion_direction)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Motion Range:</Typography>\n          <Typography variant=\"body1\">{door.motion_range}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Location:</Typography>\n          <Typography variant=\"body1\">\n            ({door.v1_x.toFixed(3)}, {door.v1_y.toFixed(3)})\n          </Typography>\n        </div>\n        <ButtonGroup style={{ marginTop: theme.spacing(1) }} fullWidth disabled={!enableControls}>\n          <Button onClick={() => onCloseClick && onCloseClick(door)}>Close</Button>\n          <Button onClick={() => onOpenClick && onOpenClick(door)}>Open</Button>\n        </ButtonGroup>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default DoorItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  doorLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  },\n\n  doorLabelOpen: {\n    borderColor: theme.palette.success.main,\n  },\n\n  doorLabelClosed: {\n    borderColor: theme.palette.error.main,\n  },\n\n  doorLabelMoving: {\n    borderColor: theme.palette.warning.main,\n  },\n}));\n\nfunction doorTypeToString(doorType: number): string {\n  switch (doorType) {\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_SLIDING:\n      return 'Double Sliding';\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_SWING:\n      return 'Double Swing';\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_TELESCOPE:\n      return 'Double Telescope';\n    case RomiCore.Door.DOOR_TYPE_SINGLE_SLIDING:\n      return 'Sliding';\n    case RomiCore.Door.DOOR_TYPE_SINGLE_TELESCOPE:\n      return 'Telescope';\n    default:\n      return `Unknown (${doorType})`;\n  }\n}\n\nfunction doorModeToString(doorState?: RomiCore.DoorState): string {\n  if (!doorState) {\n    return 'UNKNOWN';\n  }\n  switch (doorState.current_mode.value) {\n    case RomiCore.DoorMode.MODE_OPEN:\n      return 'OPEN';\n    case RomiCore.DoorMode.MODE_CLOSED:\n      return 'CLOSED';\n    case RomiCore.DoorMode.MODE_MOVING:\n      return 'MOVING';\n    default:\n      return 'UNKNOWN';\n  }\n}\n\nfunction motionDirectionToString(motionDirection: number): string {\n  switch (motionDirection) {\n    case 1:\n      return 'Clockwise';\n    case -1:\n      return 'Anti-Clockwise';\n    default:\n      return `Unknown (${motionDirection})`;\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\r\nimport React from 'react';\r\nimport DoorItem from './door-item';\r\nimport { SpotlightValue } from './spotlight-expansion-panel';\r\n\r\nexport interface DoorsPanelProps {\r\n  doors: readonly RomiCore.Door[];\r\n  doorStates: Readonly<Record<string, RomiCore.DoorState>>;\r\n  transport?: Readonly<RomiCore.Transport>;\r\n  spotlight?: Readonly<SpotlightValue<string>>;\r\n  onDoorClick?(door: RomiCore.Door): void;\r\n}\r\n\r\nexport default function DoorsPanel(props: DoorsPanelProps): JSX.Element {\r\n  const { transport, spotlight, onDoorClick } = props;\r\n  const doorRefs = React.useRef<Record<string, HTMLElement | null>>({});\r\n  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});\r\n  const doorRequestPub = React.useMemo(\r\n    () => (transport ? transport.createPublisher(RomiCore.doorRequests) : null),\r\n    [transport],\r\n  );\r\n\r\n  function requestDoor(door: RomiCore.Door, mode: number): void {\r\n    doorRequestPub?.publish({\r\n      door_name: door.name,\r\n      requested_mode: { value: mode },\r\n      requester_id: transport!.name,\r\n      request_time: RomiCore.toRosTime(new Date()),\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!spotlight) {\r\n      return;\r\n    }\r\n    const ref = doorRefs.current[spotlight.value];\r\n    if (!ref) {\r\n      return;\r\n    }\r\n    setExpanded(prev => ({\r\n      ...prev,\r\n      [spotlight.value]: true,\r\n    }));\r\n    ref.scrollIntoView({ behavior: 'smooth' });\r\n  }, [spotlight]);\r\n\r\n  const listItems = props.doors.map(door => {\r\n    const doorState = props.doorStates[door.name];\r\n    return (\r\n      <DoorItem\r\n        key={door.name}\r\n        ref={ref => (doorRefs.current[door.name] = ref)}\r\n        door={door}\r\n        doorState={doorState}\r\n        enableControls={Boolean(transport)}\r\n        onOpenClick={() => requestDoor(door, RomiCore.DoorMode.MODE_OPEN)}\r\n        onCloseClick={() => requestDoor(door, RomiCore.DoorMode.MODE_CLOSED)}\r\n        onClick={() => onDoorClick && onDoorClick(door)}\r\n        expanded={Boolean(expanded[door.name])}\r\n        onChange={(_, newExpanded) =>\r\n          setExpanded(prev => ({\r\n            ...prev,\r\n            [door.name]: newExpanded,\r\n          }))\r\n        }\r\n      />\r\n    );\r\n  });\r\n\r\n  return <React.Fragment>{listItems}</React.Fragment>;\r\n}\r\n","import { makeStyles, Typography, TypographyProps } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  disabled: {\n    color: theme.palette.action.disabled,\n  },\n}));\n\nexport interface DisableableTypography extends TypographyProps {\n  disabled?: boolean;\n}\n\nexport default function DisableableTypography(props: DisableableTypography): React.ReactElement {\n  const { className, disabled, ...otherProps } = props;\n  const classes = useStyles();\n  return (\n    <Typography className={clsx({ [classes.disabled]: disabled, className })} {...otherProps}>\n      {props.children}\n    </Typography>\n  );\n}\n","/**\n * TODO: Show indicator why lift controls are disabled.\n */\n\nimport {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  List,\n  ListItem,\n  makeStyles,\n  MenuItem,\n  Popover,\n  PopoverPosition,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React, { CSSProperties } from 'react';\nimport DisableableTypography from './disableable-typography';\n\nexport interface LiftItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  lift: Readonly<RomiCore.Lift>;\n  liftState?: Readonly<RomiCore.LiftState>;\n  enableRequest?: boolean;\n  onRequest?(lift: RomiCore.Lift, destination: string): void;\n}\n\nexport const LiftItem = React.forwardRef(function(\n  props: LiftItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { lift, liftState, enableRequest, onRequest, ...otherProps } = props;\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const [\n    liftRequestMenuState,\n    setLiftRequestMenuState,\n  ] = React.useState<LiftRequestMenuState | null>(null);\n\n  function renderList(values: string[]): JSX.Element {\n    const items = values.map(val => (\n      <ListItem key={val} dense className={classes.noPadding}>\n        <Typography variant=\"body1\">{val}</Typography>\n      </ListItem>\n    ));\n    return <List>{items}</List>;\n  }\n\n  function renderAvailableFloors(liftState?: RomiCore.LiftState): JSX.Element {\n    if (!liftState) {\n      return (\n        <DisableableTypography disabled={!liftState} variant=\"body1\">\n          Unknown\n        </DisableableTypography>\n      );\n    }\n    return renderList(liftState.available_floors);\n  }\n\n  function renderAvailableModes(liftState?: RomiCore.LiftState): JSX.Element {\n    if (!liftState) {\n      return (\n        <DisableableTypography disabled={!liftState} variant=\"body1\">\n          Unknown\n        </DisableableTypography>\n      );\n    }\n    const modes = Array.from(liftState.available_modes.values());\n    return renderList(modes.map(liftModeToString));\n  }\n\n  function liftFloorLabel(liftState?: RomiCore.LiftState): string {\n    if (!liftState) {\n      return classes.liftFloorLabelUnknown;\n    }\n    switch (liftState.motion_state) {\n      case RomiCore.LiftState.MOTION_UP:\n      case RomiCore.LiftState.MOTION_DOWN:\n        return classes.liftFloorLabelMoving;\n      default:\n        return classes.liftFloorLabelStopped;\n    }\n  }\n\n  function handleRequestClick(event: React.MouseEvent, lift: RomiCore.Lift): void {\n    setLiftRequestMenuState({\n      lift: lift,\n      anchor: { top: event.clientY, left: event.clientX },\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <ExpansionPanel ref={ref} {...otherProps}>\n        <ExpansionPanelSummary\n          classes={{ content: classes.expansionSummaryContent }}\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography variant=\"h5\">{lift.name}</Typography>\n          <Typography className={liftFloorLabel(liftState)} variant=\"button\">\n            {liftState ? liftState.current_floor : 'Unknown'}\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails className={classes.expansionDetail}>\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Location:</Typography>\n            <Typography variant=\"body1\">\n              {`(${lift.ref_x.toFixed(3)}, ${lift.ref_y.toFixed(3)})`}\n            </Typography>\n          </div>\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Destination Floor:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? liftState.destination_floor : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Available Floors:</Typography>\n            {renderAvailableFloors(liftState)}\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Current Mode:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? liftModeToString(liftState.current_mode) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Available Modes:</Typography>\n            {renderAvailableModes(liftState)}\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Door State:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? doorStateToString(liftState.door_state) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Motion State:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? motionStateToString(liftState.motion_state) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n\n          <Button\n            variant=\"outlined\"\n            style={{ marginTop: theme.spacing(1) }}\n            onClick={event => handleRequestClick(event, lift)}\n            disabled={!enableRequest}\n            fullWidth\n          >\n            Request\n          </Button>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      {liftRequestMenuState && (\n        <Popover\n          anchorReference=\"anchorPosition\"\n          anchorPosition={liftRequestMenuState?.anchor}\n          open={Boolean(liftRequestMenuState)}\n          onClose={() => setLiftRequestMenuState(null)}\n        >\n          {liftRequestMenuState &&\n            lift.levels.map(floor => (\n              <MenuItem\n                key={floor}\n                onClick={() => {\n                  onRequest && onRequest(lift, floor);\n                  setLiftRequestMenuState(null);\n                }}\n              >\n                {floor}\n              </MenuItem>\n            ))}\n        </Popover>\n      )}\n    </React.Fragment>\n  );\n});\n\ninterface LiftRequestMenuState {\n  lift: RomiCore.Lift;\n  anchor: PopoverPosition;\n}\n\nconst useStyles = makeStyles(theme => {\n  const liftFloorLabelBase: CSSProperties = {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  };\n\n  return {\n    expansionSummaryContent: {\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n\n    expansionDetail: {\n      flexFlow: 'column',\n    },\n\n    expansionDetailLine: {\n      display: 'inline-flex',\n      justifyContent: 'space-between',\n      padding: theme.spacing(0.5),\n    },\n\n    noPadding: {\n      padding: 0,\n    },\n\n    liftFloorLabelStopped: {\n      ...liftFloorLabelBase,\n      borderColor: theme.palette.info.main,\n    },\n\n    liftFloorLabelMoving: {\n      ...liftFloorLabelBase,\n      borderColor: theme.palette.warning.main,\n    },\n\n    liftFloorLabelUnknown: {\n      ...liftFloorLabelBase,\n      borderStyle: 'none',\n    },\n  };\n});\n\nfunction liftModeToString(liftMode: number): string {\n  switch (liftMode) {\n    case RomiCore.LiftState.MODE_AGV:\n      return 'AGV';\n    case RomiCore.LiftState.MODE_EMERGENCY:\n      return 'Emergency';\n    case RomiCore.LiftState.MODE_FIRE:\n      return 'Fire';\n    case RomiCore.LiftState.MODE_HUMAN:\n      return 'Human';\n    default:\n      return `Unknown (${liftMode})`;\n  }\n}\n\nfunction doorStateToString(doorState: number): string {\n  switch (doorState) {\n    case RomiCore.LiftState.DOOR_OPEN:\n      return 'Open';\n    case RomiCore.LiftState.DOOR_CLOSED:\n      return 'Closed';\n    case RomiCore.LiftState.DOOR_MOVING:\n      return 'Moving';\n    default:\n      return `Unknown (${doorState})`;\n  }\n}\n\nfunction motionStateToString(motionState: number): string {\n  switch (motionState) {\n    case RomiCore.LiftState.MOTION_DOWN:\n      return 'Down';\n    case RomiCore.LiftState.MOTION_STOPPED:\n      return 'Stopped';\n    case RomiCore.LiftState.MOTION_UP:\n      return 'Up';\n    default:\n      return `Unknown (${motionState})`;\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { LiftItem } from './lift-item';\nimport { SpotlightValue } from './spotlight-expansion-panel';\n\ninterface LiftsPanelProps {\n  lifts: readonly RomiCore.Lift[];\n  liftStates: Readonly<Record<string, RomiCore.LiftState>>;\n  transport?: Readonly<RomiCore.Transport>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n  onLiftRequest?(lift: RomiCore.Lift, destination: string): void;\n  onLiftClick?(lift: RomiCore.Lift): void;\n}\n\nexport default function LiftsPanel(props: LiftsPanelProps): JSX.Element {\n  const { transport, spotlight, onLiftRequest, onLiftClick } = props;\n  const liftRequestPub = React.useMemo(\n    () => (transport ? transport.createPublisher(RomiCore.liftRequests) : null),\n    [transport],\n  );\n  const liftRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  function handleLiftRequest(lift: RomiCore.Lift, destination: string): void {\n    liftRequestPub?.publish({\n      lift_name: lift.name,\n      door_state: RomiCore.LiftRequest.DOOR_OPEN,\n      request_type: RomiCore.LiftRequest.REQUEST_AGV_MODE,\n      request_time: RomiCore.toRosTime(new Date()),\n      destination_floor: destination,\n      session_id: transport!.name,\n    });\n    onLiftRequest && onLiftRequest(lift, destination);\n  }\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = liftRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {props.lifts.map(lift => {\n        const liftState = props.liftStates[lift.name];\n        return (\n          <LiftItem\n            key={lift.name}\n            lift={lift}\n            liftState={liftState}\n            enableRequest={Boolean(transport)}\n            onRequest={handleLiftRequest}\n            onClick={() => onLiftClick && onLiftClick(lift)}\n            expanded={Boolean(expanded[lift.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [lift.name]: newExpanded,\n              }))\n            }\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n}\n","import { Backdrop, CircularProgress, makeStyles, Typography, useTheme } from '@material-ui/core';\nimport { Check as SuccessIcon, ErrorOutline as ErrorIcon } from '@material-ui/icons';\nimport React from 'react';\n\nexport interface LoadingScreenProps {\n  caption: string;\n  variant?: 'loading' | 'success' | 'error';\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexFlow: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  caption: {\n    marginTop: theme.spacing(4),\n  },\n}));\n\nexport default function LoadingScreen(props: LoadingScreenProps) {\n  const theme = useTheme();\n  const classes = useStyles();\n  return (\n    <Backdrop className={classes.root} open={true}>\n      {(props.variant === undefined || props.variant === 'loading') && (\n        <CircularProgress size=\"8rem\" />\n      )}\n      {props.variant === 'success' && (\n        <SuccessIcon htmlColor={theme.palette.success.main} style={{ fontSize: '8rem' }} />\n      )}\n      {props.variant === 'error' && <ErrorIcon color=\"error\" style={{ fontSize: '8rem' }} />}\n      <Typography\n        className={classes.caption}\n        variant=\"button\"\n        style={{ color: theme.palette.getContrastText('#000000') }}\n      >\n        {props.caption}\n      </Typography>\n    </Backdrop>\n  );\n}\n","import { Divider, List, ListItem, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport interface MainMenuProps {\n  onDoorsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onLiftsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onRobotsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onPlacesClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onDispensersClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n}\n\nexport default function MainMenu(props: MainMenuProps): React.ReactElement {\n  return (\n    <List>\n      <ListItem button={true} onClick={props.onDoorsClick}>\n        <Typography variant=\"h5\">Doors</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onLiftsClick}>\n        <Typography variant=\"h5\">Lifts</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onRobotsClick}>\n        <Typography variant=\"h5\">Robots</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onPlacesClick}>\n        <Typography variant=\"h5\">Places</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onDispensersClick}>\n        <Typography variant=\"h5\">Dispensers</Typography>\n      </ListItem>\n    </List>\n  );\n}\n","import { Button, ButtonGroup, makeStyles } from '@material-ui/core';\nimport { Close as CloseIcon, KeyboardBackspace as BackIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { OmniPanelViewProps } from './omni-panel-view';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    display: 'flex',\n    flexFlow: 'column',\n  },\n\n  viewContainer: {\n    height: '100%',\n    overflowX: 'hidden',\n    position: 'relative',\n  },\n}));\n\nexport interface OmniPanelProps extends React.HTMLAttributes<HTMLDivElement> {\n  view: number;\n  transport?: Readonly<RomiCore.Transport>;\n  classes?: {\n    navigation?: string;\n    backButton?: string;\n    closeButton?: string;\n  };\n  onBack?: (current: number) => void;\n  onClose?: () => void;\n  children?: React.ReactElement<OmniPanelViewProps>[];\n}\n\nexport const OmniPanel = React.forwardRef(function(\n  props: OmniPanelProps,\n  ref: React.Ref<HTMLDivElement>,\n): React.ReactElement {\n  const { view, classes: innerClasses, onBack, onClose, children, ...otherProps } = props;\n  const classes = useStyles();\n\n  const className = (() =>\n    `${otherProps.className || ''} ${classes.container} ${props.className}`)();\n\n  function handleBackClick() {\n    props.onBack && props.onBack(props.view);\n  }\n\n  function handleCloseClick() {\n    props.onClose && props.onClose();\n  }\n\n  return (\n    <div {...otherProps} ref={ref} className={className}>\n      <ButtonGroup className={props.classes?.navigation} variant=\"text\" fullWidth>\n        <Button className={props.classes?.backButton} size=\"large\" onClick={handleBackClick}>\n          <BackIcon />\n        </Button>\n        <Button className={props.classes?.closeButton} size=\"large\" onClick={handleCloseClick}>\n          <CloseIcon />\n        </Button>\n      </ButtonGroup>\n      <div className={classes.viewContainer}>{props.children}</div>\n    </div>\n  );\n});\n\nexport default OmniPanel;\n","import { makeStyles, Slide } from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n  },\n}));\n\nexport interface OmniPanelViewProps {\n  value: number;\n  index: number;\n  children: React.ReactNode;\n}\n\nexport const OmniPanelView = React.forwardRef(\n  (props: OmniPanelViewProps, ref: React.Ref<HTMLDivElement>) => {\n    const classes = useStyles();\n    const { value, index, children } = props;\n    const show = value === index;\n    return (\n      <Slide\n        direction=\"left\"\n        in={show}\n        mountOnEnter\n        unmountOnExit\n        appear={false}\n      >\n        <div className={classes.container}>{children}</div>\n      </Slide>\n    );\n  },\n);\n\nexport default OmniPanelView;\n","import {\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  ListItemText,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  summary: {\n    marginTop: 0,\n    marginBottom: 0,\n  },\n\n  details: {\n    flexFlow: 'column',\n  },\n\n  detailLine: {\n    width: '100%',\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n}));\n\nexport interface PlaceItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  place: RomiCore.Place;\n  level: RomiCore.Level;\n}\n\nexport const PlaceItem = React.forwardRef(function(\n  props: PlaceItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { place, level, ...otherProps } = props;\n  const classes = useStyles();\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <ListItemText\n          className={classes.summary}\n          primary={place.name}\n          primaryTypographyProps={{ variant: 'h5' }}\n          secondary={level.name}\n        />\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.details}>\n        <div className={classes.detailLine}>\n          <Typography>Location:</Typography>\n          <Typography>{`${level.name} (${place.x.toFixed(3)}, ${place.y.toFixed(\n            3,\n          )}, ${place.yaw.toFixed(3)})`}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.detailLine}>\n          <Typography>Position Tolerance:</Typography>\n          <Typography>{place.position_tolerance.toFixed(3)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.detailLine}>\n          <Typography>Yaw Tolerance:</Typography>\n          <Typography>{place.yaw_tolerance.toFixed(3)}</Typography>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { PlaceItem } from './place-item';\nimport { SpotlightValue } from './spotlight-expansion-panel';\n\nexport interface PlacesPanelProps {\n  buildingMap: Readonly<RomiCore.BuildingMap>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n  onPlaceClick?(place: RomiCore.Place): void;\n}\n\nexport default function PlacesPanel(props: PlacesPanelProps): React.ReactElement {\n  const { buildingMap, spotlight, onPlaceClick } = props;\n  const placeRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = placeRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {buildingMap.levels.flatMap(level =>\n        level.places.map(place => (\n          <PlaceItem\n            key={place.name}\n            ref={ref => (placeRefs.current[place.name] = ref)}\n            place={place}\n            level={level}\n            onClick={() => onPlaceClick && onPlaceClick(place)}\n            expanded={Boolean(expanded[place.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [place.name]: newExpanded,\n              }))\n            }\n          />\n        )),\n      )}\n    </React.Fragment>\n  );\n}\n","import {\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface RobotsPanelProps extends Omit<ExpansionPanelProps, 'children'> {\n  robot: Readonly<RomiCore.RobotState>;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nexport const RobotItem = React.forwardRef(function(\n  props: RobotsPanelProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { robot, onRobotClick, ...otherProps } = props;\n  const classes = useStyles();\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography variant=\"h5\">{robot.name}</Typography>\n        <Typography className={classes.robotStatusLabel} variant=\"button\">\n          {robotModeToString(robot.mode)}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Model:</Typography>\n          <Typography variant=\"body1\">{robot.model}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Level:</Typography>\n          <Typography variant=\"body1\">{robot.location.level_name}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Position:</Typography>\n          <Typography variant=\"body1\">\n            {`(${robot.location.x.toFixed(3)}, ${robot.location.y.toFixed(3)})`}\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Yaw:</Typography>\n          <Typography variant=\"body1\">{robot.location.yaw.toFixed(3)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Task Id:</Typography>\n          <Typography variant=\"body1\" noWrap>\n            {robot.task_id}\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Battery:</Typography>\n          <Typography variant=\"body1\">{robot.battery_percent}</Typography>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default RobotItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  robotStatusLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    borderColor: theme.palette.info.main,\n    border: 2,\n    padding: 5,\n    minWidth: '4rem',\n    textAlign: 'center',\n  },\n}));\n\nfunction robotModeToString(robotMode: RomiCore.RobotMode): string {\n  switch (robotMode.mode) {\n    case RomiCore.RobotMode.MODE_CHARGING:\n      return 'Charging';\n    case RomiCore.RobotMode.MODE_DOCKING:\n      return 'Docking';\n    case RomiCore.RobotMode.MODE_EMERGENCY:\n      return 'Emergency';\n    case RomiCore.RobotMode.MODE_GOING_HOME:\n      return 'Going Home';\n    case RomiCore.RobotMode.MODE_IDLE:\n      return 'Idle';\n    case RomiCore.RobotMode.MODE_MOVING:\n      return 'Moving';\n    case RomiCore.RobotMode.MODE_PAUSED:\n      return 'Paused';\n    case RomiCore.RobotMode.MODE_WAITING:\n      return 'Waiting';\n    default:\n      return `Unknown (${robotMode.mode})`;\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport RobotItem from './robot-item';\nimport { SpotlightValue } from './spotlight-expansion-panel';\n\nexport interface RobotsPanelProps {\n  fleets: readonly RomiCore.FleetState[];\n  spotlight?: Readonly<SpotlightValue<string>>;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nexport default function RobotsPanel(props: RobotsPanelProps): React.ReactElement {\n  const { fleets, spotlight, onRobotClick } = props;\n  const robotRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = robotRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {fleets.flatMap(fleet =>\n        fleet.robots.map(robot => (\n          <RobotItem\n            key={robot.name}\n            ref={ref => (robotRefs.current[robot.name] = ref)}\n            robot={robot}\n            onClick={() => onRobotClick && onRobotClick(robot)}\n            expanded={Boolean(expanded[robot.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [robot.name]: newExpanded,\n              }))\n            }\n            TransitionProps={{ unmountOnExit: true }}\n          />\n        )),\n      )}\n    </React.Fragment>\n  );\n}\n","import {\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface DispenserItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  dispenserState: Readonly<RomiCore.DispenserState>;\n}\n\nexport const DispenserItem = React.forwardRef(function(\n    props: DispenserItemProps,\n    ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { dispenserState, ...otherProps } = props;\n  const classes = useStyles();\n  const dispenserModeLabelClasses = useDispenserModeLabelStyles();\n\n  function dispenserModeLabelClass(): string {\n    switch (dispenserState.mode) {\n      case RomiCore.DispenserState.IDLE:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.idle}`;\n      case RomiCore.DispenserState.BUSY:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.busy}`;\n      case RomiCore.DispenserState.OFFLINE:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.offline}`;\n      default:\n        return '';\n    }\n  }\n\n  function dispenserRequestQueueId(): React.ReactElement{\n    return (\n      <List className={classes.listRoot} dense={true}>\n        {dispenserState.request_guid_queue.map(id => (\n          <ListItem key={id}>\n            <ListItemText primary={id}></ListItemText>\n          </ListItem>\n        ))}\n      </List>\n    );\n  }\n\n  function dispenserModeToString(): string {\n    switch (dispenserState.mode) {\n      case RomiCore.DispenserState.IDLE:\n        return 'IDLE';\n      case RomiCore.DispenserState.BUSY:\n        return 'ONLINE';\n      case RomiCore.DispenserState.OFFLINE:\n        return 'OFFLINE';\n      default:\n        return 'UNKNOWN';\n    }\n  }\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}>\n        <Typography variant=\"h5\">{dispenserState.guid}</Typography>\n        <Typography className={dispenserModeLabelClass()} variant='button'>\n          {dispenserModeToString()}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">No. Queued Requests:</Typography>\n          <Typography variant=\"body1\">\n            {String(dispenserState.request_guid_queue.length)}\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Request Queue ID:</Typography>\n          {dispenserRequestQueueId()}\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Seconds Remaining:</Typography>\n          <Typography variant=\"body1\">\n            {String(dispenserState.seconds_remaining)}\n          </Typography>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default DispenserItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  dispenserLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  },\n\n  listRoot: {\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 100,\n  },\n}));\n\nconst useDispenserModeLabelStyles = makeStyles(theme => {\n  const base: CSSProperties = {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  };\n  return {\n    idle: {...base, borderColor: theme.palette.warning.main},\n    busy: {...base, borderColor: theme.palette.success.main},\n    offline: {...base, borderColor: theme.palette.error.main}\n  };\n});\n","import React from 'react';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport DispenserItem from './dispenser-item';\nimport { SpotlightValue } from './spotlight-expansion-panel';\n\nexport interface DispenserPanelProps {\n  dispenserStates: Readonly<Record<string, RomiCore.DispenserState>>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n}\n\nexport default function DispenserPanel(props: DispenserPanelProps): JSX.Element {\n  const { spotlight } = props;\n  const dispenserRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = dispenserRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  const listItems = Object.keys(props.dispenserStates).map( (guid, index) => {\n    const state = props.dispenserStates[guid];\n    return (\n      <DispenserItem\n        key={state.guid}\n        ref={ref => (dispenserRefs.current[state.guid] = ref)}\n        dispenserState={state}\n        expanded={Boolean(expanded[state.guid])}\n        onChange={(_, newExpanded) =>\n          setExpanded(prev => ({\n            ...prev,\n            [state.guid]: newExpanded,\n          }))\n        }\n      />\n    )\n  });\n\n  return <React.Fragment>{listItems}</React.Fragment>\n\n}\n\n\n","export function toBlobUrl(data: Uint8Array) {\n  const blob = new Blob([data]);\n  return URL.createObjectURL(blob);\n}\n\nexport type PromiseType<T> = T extends PromiseLike<infer U> ? U : never;","/**\n * This can be slow so it should be memoed.\n * @param name\n * @param model\n */\nexport async function computeRobotColor(name: string, model: string): Promise<string> {\n  const modelHash = new Uint16Array(await _hash(model));\n  const hue = modelHash[0] % 360;\n  const nameHash = new Uint16Array(await _hash(name));\n  const satlum = nameHash[0] % 2500;\n  const saturation = 50 + (satlum % 50);\n  const luminance = 25 + satlum / 50;\n  return `hsl(${hue}, ${saturation}%, ${luminance}%)`;\n}\n\nasync function _hash(s: string): Promise<ArrayBuffer> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(s);\n  return crypto.subtle.digest('SHA-256', data);\n}\n\nexport default class ColorManager {\n  async robotColor(name: string, model: string): Promise<string> {\n    const key = this._robotKey(name, model);\n    let color = this._robotColorCache[key];\n    if (!color) {\n      const modelHash = new Uint16Array(await _hash(model));\n      const hue = modelHash[0] % 360;\n      const nameHash = new Uint16Array(await _hash(name));\n      const satlum = nameHash[0] % 2500;\n      const saturation = 50 + (satlum % 50);\n      const luminance = 25 + satlum / 50;\n      color = `hsl(${hue}, ${saturation}%, ${luminance}%)`;\n      this._robotColorCache[key] = color;\n    }\n    return color;\n  }\n\n  robotColorFromCache(name: string, model: string): string | null {\n    const color = this._robotColorCache[this._robotKey(name, model)];\n    return color ? color : null;\n  }\n\n  private _robotColorCache: Record<string, string> = {};\n\n  private _robotKey(name: string, model: string) {\n    return `${name}__${model}`;\n  }\n}\n","import { makeStyles, useTheme } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface PlaceProps {\n  place: RomiCore.Place;\n  size: number;\n  onClick?(e: React.MouseEvent<SVGGElement>, place: RomiCore.Place): void;\n}\n\nconst Place = React.forwardRef(function(\n  props: PlaceProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const { place, size, onClick } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  return (\n    <g ref={ref} onClick={e => onClick && onClick(e as any, place)}>\n      <rect\n        className={classes.placeMarker}\n        x={place.x - size * 0.5}\n        y={-place.y - size * 0.5}\n        width={size}\n        height={size}\n        fill={theme.palette.primary.main}\n        opacity={0.95}\n      />\n    </g>\n  );\n});\n\nexport default Place;\n\nconst useStyles = makeStyles(() => ({\n  placeMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n}));\n","import { SVGOverlay as SVGOverlay_, SVGOverlayProps as SVGOverlayProps_ } from 'react-leaflet';\n\n/**\n * SVGOverlay typings are broken, its missing the required attribute 'bounds'.\n */\nexport interface SVGOverlayProps extends SVGOverlayProps_ {\n  bounds: L.LatLngBoundsExpression;\n}\n\nexport const SVGOverlay: React.FunctionComponent<SVGOverlayProps> = SVGOverlay_ as any;\n\nexport default SVGOverlay;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { viewBoxFromLeafletBounds } from '../../util/css-utils';\nimport Place from './place';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface PlacesOverlayProps extends SVGOverlayProps {\n  places: readonly RomiCore.Place[];\n  onPlaceClick?(place: RomiCore.Place): void;\n}\n\nexport default function PlacesOverlay(props: PlacesOverlayProps): React.ReactElement {\n  const { places, onPlaceClick, ...otherProps } = props;\n  const viewBox = viewBoxFromLeafletBounds(props.bounds);\n  const size = 1;\n\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {props.places.map(place => (\n          <Place\n            key={place.name}\n            place={place}\n            size={size}\n            onClick={(_, place_) => onPlaceClick && onPlaceClick(place_)}\n          />\n        ))}\n      </svg>\n    </SVGOverlay>\n  );\n}\n","import * as L from 'leaflet';\n\nexport function viewBoxFromLeafletBounds(bounds: L.LatLngBoundsExpression): string {\n  const lbounds = bounds instanceof L.LatLngBounds ? bounds : new L.LatLngBounds(bounds);\n  const width = lbounds.getEast() - lbounds.getWest();\n  const height = lbounds.getNorth() - lbounds.getSouth();\n  return `0 0 ${width} ${height}`;\n}\n","export interface Pose2D {\n  x: number;\n  y: number;\n  theta: number;\n}\n\nexport interface Segment {\n  initialPose: number;\n  finalPose: number;\n  initialVelocity: number;\n  finalVelocity: number;\n  initialTime: number;\n  finalTime: number;\n}\n\nexport interface CoefficientSet {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n}\n\nexport interface Velocity {\n  x: number;\n  y: number;\n  theta: number;\n}\n\nexport interface Knot {\n  pose: Pose2D;\n  velocity: Velocity;\n  time: number;\n}\n\nexport interface SegmentCoefficients {\n  x: CoefficientSet;\n  y: CoefficientSet;\n  theta: CoefficientSet;\n  initialTime: number;\n  finalTime: number;\n}\n\nexport function segmentToCoefficientSet(segment: Segment): CoefficientSet {\n  const {\n    initialPose: x0,\n    finalPose: x1,\n    initialVelocity: v0,\n    finalVelocity: v1,\n    initialTime,\n    finalTime,\n  } = segment;\n\n  const dt = finalTime - initialTime;\n  const w0 = v0 / dt;\n  const w1 = v1 / dt;\n\n  const a = w1 + w0 - x1 * 2 + x0 * 2;\n  const b = -w1 - w0 * 2 + x1 * 3 - x0 * 3;\n\n  return {\n    a,\n    b,\n    c: w0,\n    d: x0,\n  };\n}\n\nexport function assignKnotsToSegment(knot: Knot, nextKnot: Knot, forCoordinate: keyof Pose2D) {\n  return {\n    initialPose: knot.pose[forCoordinate],\n    finalPose: nextKnot.pose[forCoordinate],\n    initialVelocity: knot.velocity[forCoordinate],\n    finalVelocity: nextKnot.velocity[forCoordinate],\n    initialTime: knot.time,\n    finalTime: nextKnot.time,\n  };\n}\n\nexport function knotsToSegmentCoefficientsArray(knots: Knot[]): SegmentCoefficients[] {\n  const scs: SegmentCoefficients[] = [];\n\n  for (let i = 0; i < knots.length - 1; ++i) {\n    const knot = knots[i];\n    const nextKnot = knots[i + 1];\n\n    const sc: SegmentCoefficients = {\n      x: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'x')),\n      y: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'y')),\n      theta: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'theta')),\n      initialTime: knot.time,\n      finalTime: nextKnot.time,\n    };\n\n    scs.push(sc);\n  }\n\n  return scs;\n}\n\nexport function getInterpolatedTime(initialTime: number, finalTime: number, time: number) {\n  return (time - initialTime) / (finalTime - initialTime);\n}\n\nexport function resolveSpline(\n  coefficientSet: CoefficientSet,\n  interpolatedTime: number,\n  interpolatedTimePow2 = interpolatedTime ** 2,\n  interpolatedTimePow3 = interpolatedTime ** 3,\n): number {\n  return (\n    coefficientSet.a * interpolatedTimePow3 +\n    coefficientSet.b * interpolatedTimePow2 +\n    coefficientSet.c * interpolatedTime +\n    coefficientSet.d\n  );\n}\n\nexport function getPositionFromSegmentCoefficientsArray(\n  time: number,\n  scs: SegmentCoefficients[],\n): Pose2D | null {\n  let sc: SegmentCoefficients | undefined;\n\n  for (sc of scs) {\n    if (time >= sc.initialTime && time <= sc.finalTime) {\n      break;\n    }\n  }\n\n  if (!sc) {\n    return null;\n  }\n\n  const { x: xCoeff, y: yCoeff, theta: thetaCoeff, initialTime, finalTime } = sc;\n\n  const interpolatedTime = getInterpolatedTime(initialTime, finalTime, time);\n  const interpolatedTimePow2 = interpolatedTime ** 2;\n  const interpolatedTimePow3 = interpolatedTime ** 3;\n\n  return {\n    x: resolveSpline(xCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n    y: resolveSpline(yCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n    theta: resolveSpline(thetaCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n  };\n}\n\nfunction bezierHelper(coeffs: CoefficientSet): [number, number, number, number] {\n  const a = coeffs.a;\n  const b = coeffs.b;\n  const c = coeffs.c;\n  const d = coeffs.d;\n  const p0 = d;\n  const p1 = (c + p0 * 3) / 3;\n  const p2 = (b - p0 * 3 + p1 * 6) / 3;\n  const p3 = a + p0 - p1 * 3 + p2 * 3;\n\n  return [p0, p1, p2, p3];\n}\n\nexport function bezierControlPoints(segmentCoefficients: SegmentCoefficients) {\n  const px = bezierHelper(segmentCoefficients.x);\n  const py = bezierHelper(segmentCoefficients.y);\n  return px.map((x, i) => [x, py[i]]);\n}\n","import React from 'react';\nimport { rawKnotsToKnots, Trajectory } from '../../robot-trajectory-manager';\nimport { bezierControlPoints, knotsToSegmentCoefficientsArray } from '../../util/cublic-spline';\nimport { TrajectoryPath } from './trajectory-animations';\n\nexport interface RobotTrajectoryProps\n  extends React.RefAttributes<SVGPathElement>,\n    React.SVGAttributes<SVGPathElement> {\n  trajectory: Trajectory;\n  footprint: number;\n  color: string;\n}\n\nexport const RobotTrajectory = React.forwardRef(function(\n  props: RobotTrajectoryProps,\n  ref: React.Ref<SVGPathElement>,\n): React.ReactElement {\n  const { trajectory, footprint, color, ...otherProps } = props;\n\n  const pathD = React.useMemo(() => {\n    const knots = rawKnotsToKnots(trajectory.segments);\n    const coeff = knotsToSegmentCoefficientsArray(knots);\n    const bezierSplines = coeff.map(bezierControlPoints);\n\n    let d = `M ${bezierSplines[0][0][0]} ${-bezierSplines[0][0][1]} C `;\n    bezierSplines.map(\n      bzCurves =>\n        (d +=\n          `${bzCurves[1][0]} ${-bzCurves[1][1]} ` +\n          `${bzCurves[2][0]} ${-bzCurves[2][1]} ` +\n          `${bzCurves[3][0]} ${-bzCurves[3][1]} `),\n    );\n\n    return d;\n  }, [trajectory]);\n\n  return (\n    <path\n      ref={ref}\n      d={pathD}\n      stroke={color}\n      opacity={0.8}\n      strokeWidth={footprint * 0.8}\n      strokeLinecap=\"round\"\n      fill=\"none\"\n      pathLength={1}\n      strokeDasharray={2}\n      strokeDashoffset={0}\n      {...otherProps}\n    />\n  );\n});\n\nexport default RobotTrajectory;\n\nexport function trajectoryPath(trajectory: Trajectory): TrajectoryPath {\n  const knots = rawKnotsToKnots(trajectory.segments);\n  const coeff = knotsToSegmentCoefficientsArray(knots);\n  const bezierSplines = coeff.map(bezierControlPoints);\n\n  const totalDuration = knots[knots.length - 1].time - knots[0].time;\n  const segOffsets = knots.map(k => (k.time - knots[0].time) / totalDuration);\n\n  let d = `M ${bezierSplines[0][0][0]} ${-bezierSplines[0][0][1]} C `;\n  bezierSplines.map(\n    bzCurves =>\n      (d +=\n        `${bzCurves[1][0]} ${-bzCurves[1][1]} ` +\n        `${bzCurves[2][0]} ${-bzCurves[2][1]} ` +\n        `${bzCurves[3][0]} ${-bzCurves[3][1]} `),\n  );\n\n  return {\n    traj: trajectory,\n    d,\n    segOffsets,\n  };\n}\n","import * as L from 'leaflet';\nimport React from 'react';\nimport { Trajectory } from '../../robot-trajectory-manager';\nimport ColorManager from './colors';\nimport RobotTrajectory, { RobotTrajectoryProps } from './robot-trajectory';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface RobotTrajectoriesOverlayProps extends SVGOverlayProps {\n  trajs: readonly Trajectory[];\n  colorManager: Readonly<ColorManager>;\n}\n\nexport default function RobotTrajectoriesOverlay(\n  props: RobotTrajectoriesOverlayProps,\n): React.ReactElement {\n  const { trajs, colorManager, ...otherProps } = props;\n  const trajectoryContext = React.useContext(RobotTrajectoryContext);\n\n  const bounds =\n    props.bounds instanceof L.LatLngBounds ? props.bounds : new L.LatLngBounds(props.bounds);\n  const width = bounds.getEast() - bounds.getWest();\n  const height = bounds.getNorth() - bounds.getSouth();\n  const viewBox = `0 0 ${width} ${height}`;\n\n  // React.useEffect(() => {\n  //   if (!pendingColors.length) {\n  //     return;\n  //   }\n  //   (async () => {\n  //     await Promise.all(\n  //       pendingColors.map(async robot => colorManager.robotColor(robot.name, robot.model)),\n  //     );\n  //     setPendingColors([]);\n  //   })();\n  // });\n\n  // FIXME: hardcode for now, as the source of the footprint is expected to change.\n  const footprint = 0.5;\n\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {trajs.map(traj => (\n          <trajectoryContext.Component\n            key={traj.id}\n            trajectory={traj}\n            footprint={footprint}\n            color=\"green\"\n          />\n        ))}\n      </svg>\n    </SVGOverlay>\n  );\n}\n\nexport interface RobotTrajectoryContext {\n  Component: React.ComponentType<RobotTrajectoryProps>;\n}\n\nexport const RobotTrajectoryContext = React.createContext<RobotTrajectoryContext>({\n  Component: RobotTrajectory,\n});\n","import { makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport ColorManager from './colors';\n\nconst useStyles = makeStyles(() => ({\n  robotMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n}));\n\nexport interface RobotProps {\n  robot: RomiCore.RobotState;\n  footprint: number;\n  colorManager: ColorManager;\n  onClick?(e: React.MouseEvent<SVGGElement>, robot: RomiCore.RobotState): void;\n}\n\nconst Robot = React.forwardRef(function(\n  props: RobotProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const classes = useStyles();\n  const { robot, footprint, colorManager, onClick } = props;\n  const [robotColor, setRobotColor] = React.useState<string | null>(() =>\n    colorManager.robotColorFromCache(robot.name, robot.model),\n  );\n\n  const nose = React.useMemo(\n    () => [\n      robot.location.x + Math.cos(robot.location.yaw) * footprint,\n      robot.location.y + Math.sin(robot.location.yaw) * footprint,\n    ],\n    [robot, footprint],\n  );\n\n  React.useLayoutEffect(() => {\n    if (robotColor) {\n      return;\n    }\n    (async () => {\n      setRobotColor(await colorManager.robotColor(robot.name, robot.model));\n    })();\n  }, [robot, robotColor, colorManager]);\n\n  return (\n    <g ref={ref} onClick={e => onClick && onClick(e, robot)}>\n      {robotColor && (\n        <React.Fragment>\n          <filter id={`${robot.name}-shadow`} x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feDropShadow dx=\"0\" dy=\"0\" stdDeviation={footprint * 0.15} floodColor=\"black\" />\n          </filter>\n          <circle\n            className={classes.robotMarker}\n            onClick={e => onClick && onClick(e, robot)}\n            cx={robot.location.x}\n            cy={-robot.location.y}\n            r={footprint}\n            fill={robotColor}\n            filter={`url(#${robot.name}-shadow)`}\n          />\n          <line\n            x1={robot.location.x}\n            y1={-robot.location.y}\n            x2={nose[0]}\n            y2={-nose[1]}\n            stroke=\"black\"\n            strokeWidth=\"0.05\"\n          />\n        </React.Fragment>\n      )}\n    </g>\n  );\n});\n\nexport default Robot;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport * as L from 'leaflet';\nimport React from 'react';\nimport ColorManager from './colors';\nimport Robot from './robot';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface RobotsOverlayProps extends SVGOverlayProps {\n  robots: readonly RomiCore.RobotState[];\n  colorManager: ColorManager;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nexport default function RobotsOverlay(props: RobotsOverlayProps): React.ReactElement {\n  const { robots, colorManager, onRobotClick, ...otherProps } = props;\n\n  const bounds =\n    props.bounds instanceof L.LatLngBounds ? props.bounds : new L.LatLngBounds(props.bounds);\n  const width = bounds.getEast() - bounds.getWest();\n  const height = bounds.getNorth() - bounds.getSouth();\n  const viewBox = `0 0 ${width} ${height}`;\n\n  const footprint = 0.5; // FIXME: hardcode for now, footprint data not available.\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {robots.map(robot => {\n          return (\n            <Robot\n              key={robot.name}\n              robot={robot}\n              footprint={footprint}\n              colorManager={colorManager}\n              onClick={(_, robot_) => onRobotClick && onRobotClick(robot_)}\n            />\n          );\n        })}\n      </svg>\n    </SVGOverlay>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport { Trajectory } from '../../robot-trajectory-manager';\nimport { RobotTrajectoryProps } from './robot-trajectory';\n\nexport interface TrajectoryAnimationProps extends React.SVGAttributes<SVGPathElement> {\n  trajPath: TrajectoryPath;\n  duration: number;\n}\n\nexport interface TrajectoryPath {\n  traj: Trajectory;\n  d: string;\n  segOffsets: number[];\n}\n\nexport function withFillAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationDuration: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useFillStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const pathAnim = pathRef.current.cloneNode(false) as SVGPathElement;\n      pathAnim.classList.add(classes.anim);\n      pathAnim.classList.remove(classes.highlight);\n      pathAnim.setAttribute('path-length', '1');\n      pathRef.current.parentElement?.appendChild(pathAnim);\n\n      pathAnim.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: 2 - offset,\n        })),\n        {\n          duration: animationDuration,\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => pathAnim.remove();\n    }, [trajectory, classes.anim, classes.highlight]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} className={classes.highlight} />\n      </g>\n    );\n  };\n}\n\nexport function withFollowAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationDuration: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useFollowStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const pathAnim = pathRef.current.cloneNode(false) as SVGPathElement;\n      pathAnim.classList.add(classes.anim);\n      pathAnim.classList.remove(classes.highlight);\n      pathAnim.setAttribute('path-length', '1');\n      const strokeWidth = Number(pathAnim.getAttribute('stroke-width') || 1);\n      const strokeDash = strokeWidth / pathAnim.getTotalLength();\n      pathAnim.setAttribute('stroke-dasharray', `${strokeDash} ${2 - strokeDash}`);\n      pathRef.current.parentElement?.appendChild(pathAnim);\n\n      pathAnim.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: Math.max(2 - offset, strokeDash + 1),\n        })),\n        {\n          duration: animationDuration,\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => pathAnim.remove();\n    }, [trajectory, classes.anim, classes.highlight]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} className={classes.highlight} />\n      </g>\n    );\n  };\n}\n\nexport function withOutlineAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationDuration: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useOutlineStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current || !pathRef.current.parentElement) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const parent = pathRef.current.parentElement;\n\n      const mask = document.createElementNS('http://www.w3.org/2000/svg', 'mask');\n      mask.setAttribute('id', `${trajectory.id}-mask`);\n      const maskRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      maskRect.setAttribute('x', '0');\n      maskRect.setAttribute('y', '0');\n      maskRect.setAttribute('width', '100%');\n      maskRect.setAttribute('height', '100%');\n      maskRect.setAttribute('fill', 'white');\n      mask.appendChild(maskRect);\n\n      const maskPath = pathRef.current.cloneNode(false) as SVGPathElement;\n      maskPath.classList.add(classes.maskPath);\n      const pathStrokeWidth = pathRef.current.getAttribute('stroke-width');\n      if (pathStrokeWidth) {\n        maskPath.setAttribute('stroke-width', (parseFloat(pathStrokeWidth) - 0.1).toString());\n      }\n      mask.appendChild(maskPath);\n      parent.appendChild(mask);\n\n      const highlight = pathRef.current.cloneNode(false) as SVGPathElement;\n      highlight.removeAttribute('mask');\n      highlight.classList.add(classes.highlight);\n      parent.appendChild(highlight);\n\n      pathRef.current.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: 2 - offset,\n        })),\n        {\n          duration: animationDuration,\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => {\n        highlight.remove();\n        mask.remove();\n      };\n    }, [trajectory, classes.highlight, classes.maskPath]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} mask={`url(#${trajectory.id}-mask)`} />\n      </g>\n    );\n  };\n}\n\nexport function keyframeOffsets(traj: Trajectory): number[] {\n  const { segments } = traj;\n  const totalDuration = segments[segments.length - 1].t - segments[0].t;\n  return traj.segments.map(seg => (seg.t - segments[0].t) / totalDuration);\n}\n\nconst useFillStyles = makeStyles(() => ({\n  anim: {\n    opacity: 0.8,\n    strokeDasharray: 2,\n    strokeDashoffset: 2,\n  },\n  highlight: {\n    opacity: 0.4,\n  },\n}));\n\nconst useFollowStyles = makeStyles(() => ({\n  anim: {\n    opacity: 0.8,\n    strokeDashoffset: 2,\n  },\n  highlight: {\n    opacity: 0.4,\n  },\n}));\n\nconst useOutlineStyles = makeStyles(() => ({\n  highlight: {\n    opacity: 0.25,\n  },\n\n  maskPath: {\n    stroke: 'black',\n    opacity: 1,\n  },\n}));\n","import { makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport * as L from 'leaflet';\nimport React from 'react';\nimport { AttributionControl, ImageOverlay, LayersControl, Map as LMap, Pane } from 'react-leaflet';\nimport { RobotTrajectoryManager, Trajectory } from '../../robot-trajectory-manager';\nimport { AnimationSpeed, SettingsContext, TrajectoryAnimation } from '../../settings';\nimport { toBlobUrl } from '../../util';\nimport ColorManager from './colors';\nimport PlacesOverlay from './places-overlay';\nimport RobotTrajectoriesOverlay, { RobotTrajectoryContext } from './robot-trajectories-overlay';\nimport RobotTrajectory from './robot-trajectory';\nimport RobotsOverlay from './robots-overlay';\nimport { withFillAnimation, withOutlineAnimation, withFollowAnimation } from './trajectory-animations';\n\nconst useStyles = makeStyles(() => ({\n  map: {\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0,\n  },\n}));\n\ninterface MapFloorLayer {\n  level: RomiCore.Level;\n  imageUrl: string;\n  bounds: L.LatLngBounds;\n  trajectories: Trajectory[];\n}\n\nexport interface ScheduleVisualizerProps {\n  buildingMap: Readonly<RomiCore.BuildingMap>;\n  fleets: Readonly<RomiCore.FleetState[]>;\n  trajManager?: Readonly<RobotTrajectoryManager>;\n  onPlaceClick?(place: RomiCore.Place): void;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nfunction calcMaxBounds(mapFloorLayers: readonly MapFloorLayer[]): L.LatLngBounds | undefined {\n  if (!mapFloorLayers.length) {\n    return undefined;\n  }\n  const bounds = new L.LatLngBounds([0, 0], [0, 0]);\n  Object.values(mapFloorLayers).forEach(x => bounds.extend(x.bounds));\n  return bounds.pad(0.2);\n}\n\nexport default function ScheduleVisualizer(props: ScheduleVisualizerProps): React.ReactElement {\n  const classes = useStyles();\n  const mapRef = React.useRef<LMap>(null);\n  const { current: mapElement } = mapRef;\n\n  const [mapFloorLayers, setMapFloorLayers] = React.useState<\n    Readonly<Record<string, MapFloorLayer>>\n  >({});\n  const mapFloorLayerSort = React.useMemo<string[]>(\n    () => props.buildingMap.levels.sort((a, b) => a.elevation - b.elevation).map(x => x.name),\n    [props.buildingMap],\n  );\n  const [curLevelName, setCurLevelName] = React.useState(() => mapFloorLayerSort[0]);\n  const curMapFloorLayer = React.useMemo(() => mapFloorLayers[curLevelName], [\n    curLevelName,\n    mapFloorLayers,\n  ]);\n\n  const initialBounds = React.useMemo<Readonly<L.LatLngBounds> | undefined>(() => {\n    const initialLayer = mapFloorLayers[mapFloorLayerSort[0]];\n    if (!initialLayer) {\n      return undefined;\n    }\n    return initialLayer.bounds;\n  }, [mapFloorLayers, mapFloorLayerSort]);\n  const [maxBounds, setMaxBounds] = React.useState<Readonly<L.LatLngBounds> | undefined>(() =>\n    calcMaxBounds(Object.values(mapFloorLayers)),\n  );\n\n  const robotsInCurLevel = React.useMemo(() => {\n    if (!curMapFloorLayer) {\n      return [];\n    }\n    return props.fleets.flatMap(x =>\n      x.robots.filter(r => r.location.level_name === curMapFloorLayer.level.name),\n    );\n  }, [props.fleets, curMapFloorLayer]);\n  const colorManager = React.useMemo(() => new ColorManager(), []);\n\n  const settings = React.useContext(SettingsContext);\n  const trajAnimDuration = React.useMemo(() => {\n    switch (settings.trajectoryAnimationSpeed) {\n      case AnimationSpeed.Slow:\n        return 4000;\n      case AnimationSpeed.Normal:\n        return 2000;\n      case AnimationSpeed.Fast:\n        return 1000;\n    }\n  }, [settings]);\n  const TrajectoryComponent = React.useMemo(() => {\n    switch (settings.trajectoryAnimation) {\n      case TrajectoryAnimation.None:\n        return RobotTrajectory;\n      case TrajectoryAnimation.Fill:\n        return withFillAnimation(RobotTrajectory, trajAnimDuration * 0.8);\n      case TrajectoryAnimation.Follow:\n        return withFollowAnimation(RobotTrajectory, trajAnimDuration * 0.8);\n      case TrajectoryAnimation.Outline:\n        return withOutlineAnimation(RobotTrajectory, trajAnimDuration * 0.8);\n    }\n  }, [settings.trajectoryAnimation, trajAnimDuration]);\n\n  React.useEffect(() => {\n    if (!mapElement) {\n      return;\n    }\n\n    // We need the image to be loaded to know the bounds, but the image cannot be loaded without a\n    // bounds, it is possible to use a temporary bounds but that would cause the viewport to move\n    // when we replace the temporary bounds. A solution is to load the image in a temporary HTML\n    // image element, then load the ImageOverlay in leaflet, the downside is that the image gets\n    // loaded twice.\n    (async () => {\n      const promises: Promise<any>[] = [];\n      const mapFloorLayers: Record<string, MapFloorLayer> = {};\n      for (const level of props.buildingMap.levels) {\n        const image = level.images[0]; // when will there be > 1 image?\n        if (!image) {\n          continue;\n        }\n\n        promises.push(\n          new Promise(res => {\n            const imageElement = new Image();\n            const imageUrl = toBlobUrl(image.data);\n            imageElement.src = imageUrl;\n\n            const listener = () => {\n              imageElement.removeEventListener('load', listener);\n              const width = imageElement.naturalWidth * image.scale;\n              const height = imageElement.naturalHeight * image.scale;\n              // TODO: support both svg and image\n              // const svgElement = rawCompressedSVGToSVGSVGElement(image.data);\n              // const height = (svgElement.height.baseVal.value * scale) / IMAGE_SCALE;\n              // const width = (svgElement.width.baseVal.value * scale) / IMAGE_SCALE;\n\n              const bounds = new L.LatLngBounds(\n                [image.y_offset, image.x_offset],\n                [image.y_offset - height, image.x_offset + width],\n              );\n\n              mapFloorLayers[level.name] = {\n                level: level,\n                imageUrl: imageUrl,\n                bounds: bounds,\n                trajectories: [],\n              };\n              res();\n            };\n            imageElement.addEventListener('load', listener);\n          }),\n        );\n      }\n\n      for (const p of promises) {\n        await p;\n      }\n      setMapFloorLayers(mapFloorLayers);\n      setMaxBounds(calcMaxBounds(Object.values(mapFloorLayers)));\n    })();\n  }, [props.buildingMap, mapElement]);\n\n  React.useEffect(() => {\n    const trajManager = props.trajManager;\n    if (!curMapFloorLayer || !trajManager) {\n      return;\n    }\n\n    let interval: number;\n    (async () => {\n      interval = window.setInterval(async () => {\n        const resp = await trajManager.latestTrajectory({\n          request: 'trajectory',\n          param: {\n            map_name: curMapFloorLayer.level.name,\n            duration: 60000,\n            trim: true,\n          },\n        });\n        setMapFloorLayers(prev => ({\n          ...prev,\n          [curMapFloorLayer.level.name]: { ...curMapFloorLayer, trajectories: resp.values },\n        }));\n      }, trajAnimDuration);\n    })();\n    return () => clearInterval(interval);\n  }, [props.trajManager, curMapFloorLayer, TrajectoryComponent, trajAnimDuration]);\n\n  function handleBaseLayerChange(e: L.LayersControlEvent): void {\n    setCurLevelName(e.name);\n  }\n\n  const sortedMapFloorLayers = mapFloorLayerSort.map(x => mapFloorLayers[x]);\n  const ref = React.useRef<ImageOverlay>(null);\n\n  if (ref.current) {\n    ref.current.leafletElement.setZIndex(0);\n  }\n\n  return (\n    <LMap\n      ref={mapRef}\n      className={classes.map}\n      attributionControl={false}\n      crs={L.CRS.Simple}\n      minZoom={4}\n      maxZoom={8}\n      zoomDelta={0.5}\n      zoomSnap={0.5}\n      bounds={initialBounds}\n      maxBounds={maxBounds}\n      onbaselayerchange={handleBaseLayerChange}\n    >\n      <AttributionControl position=\"bottomright\" prefix=\"OSRC-SG\" />\n      <LayersControl position=\"topleft\">\n        {sortedMapFloorLayers.every(x => x) &&\n          sortedMapFloorLayers.map((floorLayer, i) => (\n            <LayersControl.BaseLayer\n              checked={i === 0}\n              name={floorLayer.level.name}\n              key={floorLayer.level.name}\n            >\n              <ImageOverlay bounds={floorLayer.bounds} url={floorLayer.imageUrl} ref={ref} />\n            </LayersControl.BaseLayer>\n          ))}\n        <LayersControl.Overlay name=\"Places\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <PlacesOverlay\n                bounds={curMapFloorLayer.bounds}\n                places={curMapFloorLayer.level.places}\n                onPlaceClick={props.onPlaceClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Robot Trajectories\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <RobotTrajectoryContext.Provider value={{ Component: TrajectoryComponent }}>\n                <RobotTrajectoriesOverlay\n                  bounds={curMapFloorLayer.bounds}\n                  trajs={curMapFloorLayer.trajectories}\n                  colorManager={colorManager}\n                />\n              </RobotTrajectoryContext.Provider>\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Robots\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <RobotsOverlay\n                bounds={curMapFloorLayer.bounds}\n                robots={robotsInCurLevel}\n                colorManager={colorManager}\n                onRobotClick={props.onRobotClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n      </LayersControl>\n    </LMap>\n  );\n}\n","import {\n  Divider,\n  Drawer,\n  DrawerProps,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  makeStyles,\n  Radio,\n  RadioGroup,\n} from '@material-ui/core';\nimport React from 'react';\nimport { Settings, TrajectoryAnimation } from '../settings';\n\nexport interface SettingsDrawerProps extends DrawerProps {\n  settings: Readonly<Settings>;\n  onSettingsChange(settings: Settings): void;\n}\n\nexport default function SettingsDrawer(props: SettingsDrawerProps): React.ReactElement {\n  const classes = useStyles();\n  const { settings, onSettingsChange, ...otherProps } = props;\n  const { trajectoryAnimation } = settings;\n\n  const trajAnimsText = React.useMemo(\n    () => Object.keys(TrajectoryAnimation).slice(Object.keys(TrajectoryAnimation).length * 0.5),\n    [],\n  );\n\n  function handleTrajectoryAnimationChange(ev: React.ChangeEvent<HTMLInputElement>): void {\n    const newSettings: Settings = { ...settings, trajectoryAnimation: Number(ev.target.value) };\n    onSettingsChange && onSettingsChange(newSettings);\n  }\n\n  return (\n    <Drawer PaperProps={{ className: classes.drawer }} anchor=\"right\" {...otherProps}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" className={classes.legendLabel}>\n          Trajectory Animation\n        </FormLabel>\n        <Divider />\n        <RadioGroup\n          className={classes.trajGroup}\n          value={trajectoryAnimation}\n          onChange={handleTrajectoryAnimationChange}\n        >\n          {trajAnimsText.map((text, i) => (\n            <FormControlLabel\n              key={i}\n              className={classes.flexBasis}\n              value={i}\n              control={<Radio />}\n              label={text}\n            />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Drawer>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  drawer: {\n    width: 300,\n  },\n  legendLabel: {\n    fontSize: theme.typography.h6.fontSize,\n    padding: theme.spacing(1),\n  },\n  trajGroup: {\n    flexDirection: 'row',\n    paddingLeft: theme.spacing(2),\n  },\n  flexBasis: {\n    flexBasis: '40%',\n  },\n}));\n","import { AppBar, Fade, IconButton, makeStyles, Toolbar, Typography } from '@material-ui/core/';\nimport { Dashboard as DashboardIcon, Settings as SettingsIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport debug from 'debug';\nimport React from 'react';\nimport 'typeface-roboto';\nimport { AppConfig } from '../app-config';\nimport DoorStateManager from '../door-state-manager';\nimport FleetManager from '../fleet-manager';\nimport LiftStateManager from '../lift-state-manager';\nimport DispenserStateManager from '../dispenser-state-manager';\nimport { RobotTrajectoryManager } from '../robot-trajectory-manager';\nimport { loadSettings, saveSettings, Settings, SettingsContext } from '../settings';\nimport './app.css';\nimport DoorsPanel from './doors-panel';\nimport LiftsPanel from './lifts-panel';\nimport LoadingScreen, { LoadingScreenProps } from './loading-screen';\nimport MainMenu from './main-menu';\nimport OmniPanel from './omni-panel';\nimport OmniPanelView from './omni-panel-view';\nimport PlacesPanel from './places-panel';\nimport RobotsPanel from './robots-panel';\nimport DispensersPanel from './dispensers-panel';\nimport ScheduleVisualizer from './schedule-visualizer';\nimport SettingsDrawer from './settings-drawer';\nimport { SpotlightValue } from './spotlight-expansion-panel';\n\nconst borderRadius = 20;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexFlow: 'column',\n    height: '100%',\n  },\n  toolBarTitle: {\n    flexGrow: 1,\n  },\n  omniPanel: {\n    position: 'fixed',\n    width: 350,\n    top: 80,\n    right: '1%',\n    bottom: '2%',\n    backgroundColor: theme.palette.background.default,\n    zIndex: 1024,\n    borderTopLeftRadius: borderRadius,\n    borderTopRightRadius: borderRadius,\n    boxShadow: theme.shadows[12],\n  },\n  topLeftBorder: {\n    borderTopLeftRadius: borderRadius,\n  },\n  topRightBorder: {\n    borderTopRightRadius: borderRadius,\n  },\n}));\n\nexport interface AppProps {\n  appConfig: AppConfig;\n}\n\nenum OmniPanelViewIndex {\n  MainMenu = 0,\n  Doors,\n  Lifts,\n  Robots,\n  Places,\n  Dispensers,\n}\n\nclass ViewMapNode {\n  constructor(public value: OmniPanelViewIndex, public parent?: ViewMapNode) {}\n\n  addChild(view: OmniPanelViewIndex): ViewMapNode {\n    return new ViewMapNode(view, this);\n  }\n}\n\ntype ViewMap = { [key: number]: ViewMapNode };\n\nfunction makeViewMap(): ViewMap {\n  const viewMap: ViewMap = {};\n  const root = new ViewMapNode(OmniPanelViewIndex.MainMenu);\n  viewMap[OmniPanelViewIndex.MainMenu] = root;\n  viewMap[OmniPanelViewIndex.Doors] = root.addChild(OmniPanelViewIndex.Doors);\n  viewMap[OmniPanelViewIndex.Lifts] = root.addChild(OmniPanelViewIndex.Lifts);\n  viewMap[OmniPanelViewIndex.Robots] = root.addChild(OmniPanelViewIndex.Robots);\n  viewMap[OmniPanelViewIndex.Places] = root.addChild(OmniPanelViewIndex.Places);\n  viewMap[OmniPanelViewIndex.Dispensers] = root.addChild(OmniPanelViewIndex.Dispensers);\n  return viewMap;\n}\n\nconst viewMap = makeViewMap();\n\nexport default function App(props: AppProps): JSX.Element {\n  const classes = useStyles();\n  const { transportFactory, trajectoryManagerFactory } = props.appConfig;\n  const [transport, setTransport] = React.useState<RomiCore.Transport | undefined>(undefined);\n  const [buildingMap, setBuildingMap] = React.useState<RomiCore.BuildingMap | undefined>(undefined);\n  const trajManager = React.useRef<RobotTrajectoryManager | undefined>(undefined);\n\n  const { current: doorStateManager } = React.useRef(\n    React.useMemo(() => new DoorStateManager(), []),\n  );\n  const [doorStates, setDoorStates] = React.useState<Readonly<Record<string, RomiCore.DoorState>>>(\n    {},\n  );\n  const [doors, setDoors] = React.useState<readonly RomiCore.Door[]>([]);\n  // FIXME: not used for now as there is not enough information to render doors.\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [doorSpotlight, setDoorSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const { current: liftStateManager } = React.useRef(\n    React.useMemo(() => new LiftStateManager(), []),\n  );\n  const [liftStates, setLiftStates] = React.useState<Readonly<Record<string, RomiCore.LiftState>>>(\n    {},\n  );\n  const [lifts, setLifts] = React.useState<readonly RomiCore.Lift[]>([]);\n  // FIXME: not used for now as there is not enough information to render lifts.\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [liftSpotlight, setLiftSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const fleetManager = React.useMemo(() => new FleetManager(), []);\n  const [fleets, setFleets] = React.useState(fleetManager.fleets());\n  const [robotSpotlight, setRobotSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n  \n  const [placeSpotlight, setPlaceSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const { current: dispenserStateManager } = React.useRef(\n    React.useMemo(() => new DispenserStateManager(), []),\n  );\n  const [dispenserStates, setDispenserStates] = React.useState<Readonly<Record<string, RomiCore.DispenserState>>>(\n    {}\n  );\n  const [dispenserSpotlight, setDispenserSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const [showOmniPanel, setShowOmniPanel] = React.useState(true);\n  const [currentView, setCurrentView] = React.useState(OmniPanelViewIndex.MainMenu);\n  const [loading, setLoading] = React.useState<LoadingScreenProps | null>({\n    caption: 'Connecting to SOSS...',\n  });\n\n  const [showSettings, setShowSettings] = React.useState(false);\n  const [settings, setSettings] = React.useState<Settings>(() => loadSettings());\n\n  React.useEffect(() => {\n    setLoading({ caption: 'Connecting to SOSS server...' });\n    transportFactory()\n      .then(x => {\n        x.on('error', console.error);\n        x.once('close', () => {\n          setLoading({ caption: 'Lost connection to SOSS', variant: 'error' });\n          setTransport(undefined);\n        });\n        doorStateManager.startSubscription(x);\n        liftStateManager.startSubscription(x);\n        dispenserStateManager.startSubscription(x);\n        fleetManager.startSubscription(x);\n        fleetManager.on('updated', () => setFleets(fleetManager.fleets()));\n        setTransport(x);\n      })\n      .catch((e: CloseEvent) => {\n        setLoading({ caption: `Unable to connect to SOSS server (${e.code})`, variant: 'error' });\n      });\n  }, [transportFactory, doorStateManager, liftStateManager, dispenserStateManager, fleetManager]);\n\n  React.useEffect(() => {\n    if (!transport) {\n      return;\n    }\n    setLoading({ caption: 'Downloading building map...' });\n    const request = new RomiCore.GetBuildingMap_Request();\n    transport\n      .call(RomiCore.getBuildingMap, request)\n      .then(result => {\n        setBuildingMap(result.building_map);\n        setLoading(null);\n      })\n      .catch(() => {\n        setLoading({ caption: 'Unable to download building map', variant: 'error' });\n      });\n  }, [transport]);\n\n  React.useEffect(() => {\n    if (!trajectoryManagerFactory) {\n      return;\n    }\n    (async () => {\n      trajManager.current = await trajectoryManagerFactory();\n    })();\n  }, [trajectoryManagerFactory]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Doors) {\n      const listener = () => setDoorStates(doorStateManager.doorStates());\n      doorStateManager.on('updated', listener);\n      debug.log('started tracking door states');\n      return () => {\n        doorStateManager.off('updated', listener);\n        debug.log('stopped tracking door states');\n      };\n    }\n  }, [currentView, doorStateManager]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Lifts) {\n      const listener = () => setLiftStates(liftStateManager.liftStates());\n      liftStateManager.on('updated', listener);\n      debug.log('started tracking lift states');\n      return () => {\n        liftStateManager.off('updated', listener);\n        debug.log('stopped tracking lift states');\n      };\n    }\n  }, [currentView, liftStateManager]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Dispensers) {\n      const listener = () => setDispenserStates(dispenserStateManager.dispenserStates());\n      dispenserStateManager.on('updated', listener);\n      debug.log('started tracking dispenser states');\n      return () => {\n        dispenserStateManager.off('updated', listener);\n        debug.log('stopped tracking dispenser states');\n      };\n    }\n  }, [currentView, dispenserStateManager]);\n\n  React.useEffect(() => {\n    setDoors(buildingMap ? buildingMap.levels.flatMap(x => x.doors) : []);\n    setLifts(buildingMap ? buildingMap.lifts : []);\n  }, [buildingMap]);\n\n  function handlePlaceClick(place: RomiCore.Place): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Places);\n    setPlaceSpotlight({ value: place.name });\n  }\n\n  function handleRobotClick(robot: RomiCore.RobotState): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Robots);\n    setRobotSpotlight({ value: robot.name });\n  }\n\n  function clearSpotlights() {\n    setDoorSpotlight(undefined);\n    setLiftSpotlight(undefined);\n    setRobotSpotlight(undefined);\n    setDispenserSpotlight(undefined);\n  }\n\n  function handleClose() {\n    clearSpotlights();\n    setShowOmniPanel(false);\n  }\n\n  function handleBack(index: number): void {\n    clearSpotlights();\n    const parent = viewMap[index].parent;\n    if (!parent) {\n      return handleClose();\n    }\n    setCurrentView(parent.value);\n  }\n\n  function handleMainMenuDoorsClick(): void {\n    setDoorStates(doorStateManager.doorStates());\n    setCurrentView(OmniPanelViewIndex.Doors);\n  }\n\n  function handleMainMenuLiftsClick(): void {\n    setLiftStates(liftStateManager.liftStates());\n    setCurrentView(OmniPanelViewIndex.Lifts);\n  }\n\n  function handleMainMenuRobotsClick(): void {\n    setCurrentView(OmniPanelViewIndex.Robots);\n  }\n\n  function handleMainMenuPlacesClick(): void {\n    setCurrentView(OmniPanelViewIndex.Places);\n  }\n\n  function handleMainMenuDispensersClick(): void {\n    setCurrentView(OmniPanelViewIndex.Dispensers);\n  }\n\n  return (\n    <React.Fragment>\n      <SettingsContext.Provider value={settings}>\n        {loading && <LoadingScreen {...loading} />}\n        <div className={classes.container}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\" className={classes.toolBarTitle}>\n                Dashboard\n              </Typography>\n              <IconButton color=\"inherit\" onClick={() => setShowOmniPanel(!showOmniPanel)}>\n                <DashboardIcon />\n              </IconButton>\n              <IconButton color=\"inherit\" onClick={() => setShowSettings(true)}>\n                <SettingsIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n          {buildingMap && (\n            <ScheduleVisualizer\n              buildingMap={buildingMap}\n              fleets={fleets}\n              trajManager={trajManager.current}\n              onPlaceClick={handlePlaceClick}\n              onRobotClick={handleRobotClick}\n            />\n          )}\n          <Fade in={showOmniPanel}>\n            <OmniPanel\n              className={classes.omniPanel}\n              classes={{\n                backButton: classes.topLeftBorder,\n                closeButton: classes.topRightBorder,\n              }}\n              view={currentView}\n              onBack={handleBack}\n              onClose={handleClose}\n            >\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.MainMenu}>\n                <MainMenu\n                  onDoorsClick={handleMainMenuDoorsClick}\n                  onLiftsClick={handleMainMenuLiftsClick}\n                  onRobotsClick={handleMainMenuRobotsClick}\n                  onPlacesClick={handleMainMenuPlacesClick}\n                  onDispensersClick={handleMainMenuDispensersClick}\n                />\n              </OmniPanelView>\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.Doors}>\n                <DoorsPanel transport={transport} doorStates={doorStates} doors={doors} />\n              </OmniPanelView>\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.Lifts}>\n                <LiftsPanel transport={transport} liftStates={liftStates} lifts={lifts} />\n              </OmniPanelView>\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.Robots}>\n                <RobotsPanel fleets={fleets} spotlight={robotSpotlight} />\n              </OmniPanelView>\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.Places}>\n                {buildingMap && (\n                  <PlacesPanel buildingMap={buildingMap} spotlight={placeSpotlight} />\n                )}\n              </OmniPanelView>\n              <OmniPanelView value={currentView} index={OmniPanelViewIndex.Dispensers}>\n                <DispensersPanel dispenserStates={dispenserStates}\n                    spotlight={dispenserSpotlight} />\n              </OmniPanelView>\n            </OmniPanel>\n          </Fade>\n          <SettingsDrawer\n            settings={settings}\n            open={showSettings}\n            onSettingsChange={newSettings => {\n              setSettings(newSettings);\n              saveSettings(newSettings);\n            }}\n            onClose={() => setShowSettings(false)}\n          />\n        </div>\n      </SettingsContext.Provider>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as L from 'leaflet';\n\nimport './control-positions.css';\n\nexport type ControlPosition = (\n  L.ControlPosition | 'topcenter' | 'bottomcenter' | 'leftcenter' | 'rightcenter' | 'center'\n);\n\nexport function extendControlPositions() {\n  // Implement feature from this PR: https://github.com/Leaflet/Leaflet/pull/5554\n  const origInitControlPos = (L.Map as any).prototype._initControlPos;\n  L.Map.include({\n    _initControlPos() {\n      origInitControlPos.call(this);\n      this._controlCorners['topcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-top leaflet-horizontal-center',\n        this._controlContainer,\n      );\n      this._controlCorners['bottomcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-bottom leaflet-horizontal-center',\n        this._controlContainer,\n      );\n      this._controlCorners['leftcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-left leaflet-vertical-center',\n        this._controlContainer,\n      );\n      this._controlCorners['rightcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-right leaflet-vertical-center',\n        this._controlContainer,\n      );\n      this._controlCorners['center'] = L.DomUtil.create(\n        'div',\n        'leaflet-horizontal-center leaflet-vertical-center',\n        this._controlContainer,\n      );\n    },\n  });\n}","import 'leaflet/dist/leaflet.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport appConfig from './app-config';\nimport App from './components/app';\nimport { extendControlPositions } from './leaflet/control-positions';\nimport * as serviceWorker from './serviceWorker';\n\nextendControlPositions();\n\nReactDOM.render(<App appConfig={appConfig} />, document.getElementById('root'));\n\n// NOTE: There is no point to have the app work offline as all the data must come from rmf/romi and\n// cannot be cached.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport airportPngUrl from './airport_terminal.png';\nimport officePngUrl from './office.png';\n\nexport default async function buildingMap(): Promise<RomiCore.BuildingMap> {\n  let officePng: Uint8Array;\n  let airportPng: Uint8Array;\n  if (process.env.NODE_ENV === 'test') {\n    const fs = await import('fs');\n    officePng = fs.readFileSync(`${__dirname}/office.png`);\n    airportPng = fs.readFileSync(`${__dirname}/airport_terminal.png`);\n  } else {\n    const officePngResp = await fetch(officePngUrl);\n    officePng = new Uint8Array(await officePngResp.arrayBuffer());\n    const airportPngResp = await fetch(airportPngUrl);\n    airportPng = new Uint8Array(await airportPngResp.arrayBuffer());\n  }\n\n  const doors = [\n    {\n      name: 'main_door',\n      v1_x: 7,\n      v1_y: -6,\n      v2_x: 8,\n      v2_y: -6.2,\n      door_type: 1,\n      motion_range: 1.571,\n      motion_direction: 1,\n    },\n    {\n      name: 'hardware_door',\n      v1_x: 4,\n      v1_y: -4,\n      v2_x: 4.1,\n      v2_y: -3.8,\n      door_type: 1,\n      motion_range: 1.571,\n      motion_direction: -1,\n    },\n    {\n      name: 'coe_door',\n      v1_x: 6,\n      v1_y: -6,\n      v2_x: 6.2,\n      v2_y: -5.9,\n      door_type: 2,\n      motion_range: -1.571,\n      motion_direction: 1,\n    },\n  ];\n\n  return {\n    name: 'test building',\n    levels: [\n      {\n        name: 'L1',\n        elevation: 0,\n        images: [\n          {\n            data: officePng,\n            encoding: 'png',\n            name: 'office',\n            scale: 0.008465494960546494,\n            x_offset: 0,\n            y_offset: 0,\n            yaw: 0,\n          },\n        ],\n        places: [\n          {\n            name: 'Place1',\n            x: 2,\n            y: -2,\n            yaw: 0,\n            position_tolerance: 0,\n            yaw_tolerance: 0,\n          },\n          {\n            name: 'Place2',\n            x: 8,\n            y: -4,\n            yaw: 0,\n            position_tolerance: 0,\n            yaw_tolerance: 0,\n          },\n        ],\n        doors: doors,\n        nav_graphs: [],\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n      {\n        name: 'Airport Terminal',\n        elevation: 10,\n        doors: [],\n        images: [\n          {\n            data: airportPng,\n            encoding: 'png',\n            name: 'airport_terminal',\n            scale: 0.08212187141180038,\n            x_offset: 0,\n            y_offset: 0,\n            yaw: 0,\n          },\n        ],\n        nav_graphs: [],\n        places: [],\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n    ],\n    lifts: [\n      {\n        name: 'Lift1',\n        doors: [],\n        levels: ['L1', 'L2', 'L3'],\n        ref_x: 0,\n        ref_y: 0,\n        ref_yaw: 0,\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n      {\n        name: 'Lift2',\n        doors: [],\n        levels: ['L1', 'L2', 'L3', 'L4'],\n        ref_x: 10,\n        ref_y: 10,\n        ref_yaw: 1.571,\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n      {\n        name: 'mysterious_lift',\n        doors: [],\n        levels: ['L1', 'L2', 'L3', 'L4'],\n        ref_x: 10,\n        ref_y: 10,\n        ref_yaw: 1.571,\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n    ],\n  };\n}\n","module.exports = __webpack_public_path__ + \"static/media/airport_terminal.f7ab7134.png\";","module.exports = __webpack_public_path__ + \"static/media/office.73533f75.png\";"],"sourceRoot":""}